{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { useAuth } from \"../context/AuthContext\";\n// import { TextField, Button, Container, Typography, Box, Alert, CircularProgress } from \"@mui/material\";\n\n// const ResetPassword = () => {\n//   const { uidb64, token } = useParams();\n//   const [password, setPassword] = useState(\"\");\n//   const [password2, setPassword2] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [tokenValid, setTokenValid] = useState(null);\n//   const { resetPassword } = useAuth();\n//   const navigate = useNavigate();\n\n//   // Check token validity when component mounts\n//   useEffect(() => {\n//     const checkToken = async () => {\n//       try {\n//         setLoading(true);\n//         setTokenValid(true);\n//       } catch (err) {\n//         setError(\"The reset link is invalid or has expired.\");\n//         setTokenValid(false);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     checkToken();\n//   }, [uidb64, token]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\");\n//     setMessage(\"\");\n\n//     if (password !== password2) {\n//       setError(\"Passwords do not match\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     const success = await resetPassword(uidb64, token, password, password2);\n//     setLoading(false);\n\n//     if (success) {\n//       setMessage(\"Password reset successfully. You can now login with your new password.\");\n//       console.log(\"Password reset successful\", success);\n//       setTimeout(() => navigate(\"/login\"), 3000);\n//     } else {\n//       setError(\"Password reset failed. The link may be invalid or expired.\");\n//       console.log(\"Password reset failed. The link may be invalid or expired.\");\n//     }\n//   };\n\n//   if (loading && tokenValid === null) {\n//     return (\n//       <Container maxWidth=\"xs\">\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <CircularProgress />\n//           <Typography variant=\"body1\" sx={{ mt: 2 }}>\n//             Verifying reset link...\n//           </Typography>\n//         </Box>\n//       </Container>\n//     );\n//   }\n\n//   if (tokenValid === false) {\n//     return (\n//       <Container maxWidth=\"xs\">\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\n//             {error || \"The password reset link is invalid or has expired.\"}\n//           </Alert>\n//           <Button variant=\"contained\" onClick={() => navigate('/forgot-password')}>\n//             Request New Reset Link\n//           </Button>\n//         </Box>\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"xs\">\n//       <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//         <Typography component=\"h1\" variant=\"h5\">\n//           Reset Password\n//         </Typography>\n//         {message && (\n//           <Alert severity=\"success\" sx={{ width: '100%', mt: 2 }}>\n//             {message}\n//           </Alert>\n//         )}\n//         {error && (\n//           <Alert severity=\"error\" sx={{ width: '100%', mt: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n//         <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\n//           <TextField\n//             margin=\"normal\"\n//             required\n//             fullWidth\n//             name=\"password\"\n//             label=\"New Password\"\n//             type=\"password\"\n//             id=\"password\"\n//             autoComplete=\"new-password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//           />\n//           <TextField\n//             margin=\"normal\"\n//             required\n//             fullWidth\n//             name=\"password2\"\n//             label=\"Confirm New Password\"\n//             type=\"password\"\n//             id=\"password2\"\n//             autoComplete=\"new-password\"\n//             value={password2}\n//             onChange={(e) => setPassword2(e.target.value)}\n//           />\n//           <Button\n//             type=\"submit\"\n//             fullWidth\n//             variant=\"contained\"\n//             sx={{ mt: 3, mb: 2 }}\n//             disabled={loading}\n//           >\n//             {loading ? <CircularProgress size={24} /> : \"Reset Password\"}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default ResetPassword;","map":{"version":3,"names":[],"sources":["C:/Users/ahmed/Desktop/CP/djr_auth_deep/auth-client/src/pages/ResetPassword.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import { useNavigate, useParams } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/AuthContext\";\r\n// import { TextField, Button, Container, Typography, Box, Alert, CircularProgress } from \"@mui/material\";\r\n\r\n// const ResetPassword = () => {\r\n//   const { uidb64, token } = useParams();\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [password2, setPassword2] = useState(\"\");\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [tokenValid, setTokenValid] = useState(null);\r\n//   const { resetPassword } = useAuth();\r\n//   const navigate = useNavigate();\r\n\r\n//   // Check token validity when component mounts\r\n//   useEffect(() => {\r\n//     const checkToken = async () => {\r\n//       try {\r\n//         setLoading(true);\r\n//         setTokenValid(true);\r\n//       } catch (err) {\r\n//         setError(\"The reset link is invalid or has expired.\");\r\n//         setTokenValid(false);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n    \r\n//     checkToken();\r\n//   }, [uidb64, token]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setError(\"\");\r\n//     setMessage(\"\");\r\n\r\n//     if (password !== password2) {\r\n//       setError(\"Passwords do not match\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     const success = await resetPassword(uidb64, token, password, password2);\r\n//     setLoading(false);\r\n    \r\n//     if (success) {\r\n//       setMessage(\"Password reset successfully. You can now login with your new password.\");\r\n//       console.log(\"Password reset successful\", success);\r\n//       setTimeout(() => navigate(\"/login\"), 3000);\r\n//     } else {\r\n//       setError(\"Password reset failed. The link may be invalid or expired.\");\r\n//       console.log(\"Password reset failed. The link may be invalid or expired.\");\r\n//     }\r\n//   };\r\n\r\n//   if (loading && tokenValid === null) {\r\n//     return (\r\n//       <Container maxWidth=\"xs\">\r\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//           <CircularProgress />\r\n//           <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n//             Verifying reset link...\r\n//           </Typography>\r\n//         </Box>\r\n//       </Container>\r\n//     );\r\n//   }\r\n\r\n//   if (tokenValid === false) {\r\n//     return (\r\n//       <Container maxWidth=\"xs\">\r\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//           <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\r\n//             {error || \"The password reset link is invalid or has expired.\"}\r\n//           </Alert>\r\n//           <Button variant=\"contained\" onClick={() => navigate('/forgot-password')}>\r\n//             Request New Reset Link\r\n//           </Button>\r\n//         </Box>\r\n//       </Container>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <Container maxWidth=\"xs\">\r\n//       <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//         <Typography component=\"h1\" variant=\"h5\">\r\n//           Reset Password\r\n//         </Typography>\r\n//         {message && (\r\n//           <Alert severity=\"success\" sx={{ width: '100%', mt: 2 }}>\r\n//             {message}\r\n//           </Alert>\r\n//         )}\r\n//         {error && (\r\n//           <Alert severity=\"error\" sx={{ width: '100%', mt: 2 }}>\r\n//             {error}\r\n//           </Alert>\r\n//         )}\r\n//         <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             name=\"password\"\r\n//             label=\"New Password\"\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             autoComplete=\"new-password\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             name=\"password2\"\r\n//             label=\"Confirm New Password\"\r\n//             type=\"password\"\r\n//             id=\"password2\"\r\n//             autoComplete=\"new-password\"\r\n//             value={password2}\r\n//             onChange={(e) => setPassword2(e.target.value)}\r\n//           />\r\n//           <Button\r\n//             type=\"submit\"\r\n//             fullWidth\r\n//             variant=\"contained\"\r\n//             sx={{ mt: 3, mb: 2 }}\r\n//             disabled={loading}\r\n//           >\r\n//             {loading ? <CircularProgress size={24} /> : \"Reset Password\"}\r\n//           </Button>\r\n//         </Box>\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default ResetPassword;\r\n\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}