{"ast":null,"code":"// /* eslint-disable no-unused-vars */\n// import { useState } from \"react\";\n// import { useNavigate, Link } from \"react-router-dom\";\n// import { useAuth } from \"../context/AuthContext\";\n// import GoogleIcon from \"@mui/icons-material/Google\";\n// import {\n//   TextField,\n//   Button,\n//   Container,\n//   Typography,\n//   Box,\n//   Alert,\n//   Divider,\n//   CircularProgress,\n// } from \"@mui/material\";\n\n// const Login = () => {\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [isGoogleLoading, setIsGoogleLoading] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const { register, loginWithGoogle, login } = useAuth();\n//   const navigate = useNavigate();\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\");\n//     setIsLoading(true);\n\n//     try {\n//       const result = await login(email, password);\n//       if (result.success) {\n//         navigate(\"/\");\n//       } else {\n//         // Show specific error message for unverified emails\n//         if (result.error.includes(\"verified\")) {\n//           setError(\n//             result.error + \" Check your email for the verification code.\"\n//           );\n//         } else {\n//           setError(result.error);\n//         }\n//       }\n//     } catch (err) {\n//       setError(\"An unexpected error occurred during login\");\n//       console.error(err);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleGoogleSignUp = async () => {\n//     setError(\"\");\n//     setIsGoogleLoading(true);\n\n//     try {\n//       const result = await loginWithGoogle();\n\n//       if (result.success) {\n//         console.log(\"Google sign-up successful\");\n//         navigate(\"/\");\n//       } else {\n//         // Check specifically for time-related errors\n//         if (result.error && result.error.includes(\"clock\")) {\n//           setError(\n//             \"Your computer's clock is not synchronized. Please update your system time and try again.\"\n//           );\n//         } else {\n//           setError(result.error || \"Google sign-up failed. Please try again.\");\n//         }\n//         console.error(\"Google sign-up error:\", result.error);\n//       }\n//     } catch (err) {\n//       if (err.message && err.message.includes(\"clock\")) {\n//         setError(\n//           \"Your computer's clock is not synchronized. Please update your system time and try again.\"\n//         );\n//       } else {\n//         setError(\"An unexpected error occurred during Google sign-up\");\n//       }\n//       console.error(err);\n//     } finally {\n//       setIsGoogleLoading(false);\n//     }\n//   };\n\n//   return (\n//     <Container maxWidth=\"xs\">\n//       <Box\n//         sx={{\n//           mt: 8,\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           alignItems: \"center\",\n//         }}\n//       >\n//         <Typography component=\"h1\" variant=\"h5\">\n//           Sign in\n//         </Typography>\n\n//         {/* Google Sign-up Button */}\n//         <Button\n//           fullWidth\n//           variant=\"outlined\"\n//           startIcon={\n//             isGoogleLoading ? <CircularProgress size={20} /> : <GoogleIcon />\n//           }\n//           onClick={handleGoogleSignUp}\n//           disabled={isGoogleLoading}\n//           sx={{ mt: 3, py: 1 }}\n//         >\n//           {isGoogleLoading ? \"Signing in...\" : \"Sign in with Google\"}\n//         </Button>\n\n//         <Box sx={{ position: \"relative\", width: \"100%\", my: 3 }}>\n//           <Divider>\n//             <Typography variant=\"body2\" color=\"text.secondary\">\n//               OR\n//             </Typography>\n//           </Divider>\n//         </Box>\n//         {error && (\n//           <Alert severity=\"error\" sx={{ width: \"100%\", mt: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n//         <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\n//           <TextField\n//             margin=\"normal\"\n//             required\n//             fullWidth\n//             id=\"email\"\n//             label=\"Email Address\"\n//             name=\"email\"\n//             autoComplete=\"email\"\n//             autoFocus\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//           />\n//           <TextField\n//             margin=\"normal\"\n//             required\n//             fullWidth\n//             name=\"password\"\n//             label=\"Password\"\n//             type=\"password\"\n//             id=\"password\"\n//             autoComplete=\"current-password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//           />\n//           <Button\n//             type=\"submit\"\n//             fullWidth\n//             variant=\"contained\"\n//             sx={{ mt: 3, mb: 2 }}\n//             disabled={isLoading}\n//           >\n//             {isLoading ? (\n//               <>\n//                 <CircularProgress size={24} sx={{ mr: 1 }} color=\"inherit\" />\n//                 Signing In...\n//               </>\n//             ) : (\n//               \"Sign In\"\n//             )}\n//           </Button>\n//           <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n//             <Link to=\"/register\" variant=\"body2\">\n//               Don't have an account? Sign Up\n//             </Link>\n//             <Link to=\"/forgot-password\" variant=\"body2\">\n//               Forgot password?\n//             </Link>\n//           </Box>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default Login;","map":{"version":3,"names":[],"sources":["C:/Users/ahmed/Desktop/CP/New folder/auth-client/src/pages/Login.js"],"sourcesContent":["// /* eslint-disable no-unused-vars */\r\n// import { useState } from \"react\";\r\n// import { useNavigate, Link } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/AuthContext\";\r\n// import GoogleIcon from \"@mui/icons-material/Google\";\r\n// import {\r\n//   TextField,\r\n//   Button,\r\n//   Container,\r\n//   Typography,\r\n//   Box,\r\n//   Alert,\r\n//   Divider,\r\n//   CircularProgress,\r\n// } from \"@mui/material\";\r\n\r\n// const Login = () => {\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [isGoogleLoading, setIsGoogleLoading] = useState(false);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const { register, loginWithGoogle, login } = useAuth();\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setError(\"\");\r\n//     setIsLoading(true);\r\n\r\n//     try {\r\n//       const result = await login(email, password);\r\n//       if (result.success) {\r\n//         navigate(\"/\");\r\n//       } else {\r\n//         // Show specific error message for unverified emails\r\n//         if (result.error.includes(\"verified\")) {\r\n//           setError(\r\n//             result.error + \" Check your email for the verification code.\"\r\n//           );\r\n//         } else {\r\n//           setError(result.error);\r\n//         }\r\n//       }\r\n//     } catch (err) {\r\n//       setError(\"An unexpected error occurred during login\");\r\n//       console.error(err);\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleGoogleSignUp = async () => {\r\n//     setError(\"\");\r\n//     setIsGoogleLoading(true);\r\n\r\n//     try {\r\n//       const result = await loginWithGoogle();\r\n\r\n//       if (result.success) {\r\n//         console.log(\"Google sign-up successful\");\r\n//         navigate(\"/\");\r\n//       } else {\r\n//         // Check specifically for time-related errors\r\n//         if (result.error && result.error.includes(\"clock\")) {\r\n//           setError(\r\n//             \"Your computer's clock is not synchronized. Please update your system time and try again.\"\r\n//           );\r\n//         } else {\r\n//           setError(result.error || \"Google sign-up failed. Please try again.\");\r\n//         }\r\n//         console.error(\"Google sign-up error:\", result.error);\r\n//       }\r\n//     } catch (err) {\r\n//       if (err.message && err.message.includes(\"clock\")) {\r\n//         setError(\r\n//           \"Your computer's clock is not synchronized. Please update your system time and try again.\"\r\n//         );\r\n//       } else {\r\n//         setError(\"An unexpected error occurred during Google sign-up\");\r\n//       }\r\n//       console.error(err);\r\n//     } finally {\r\n//       setIsGoogleLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Container maxWidth=\"xs\">\r\n//       <Box\r\n//         sx={{\r\n//           mt: 8,\r\n//           display: \"flex\",\r\n//           flexDirection: \"column\",\r\n//           alignItems: \"center\",\r\n//         }}\r\n//       >\r\n//         <Typography component=\"h1\" variant=\"h5\">\r\n//           Sign in\r\n//         </Typography>\r\n\r\n//         {/* Google Sign-up Button */}\r\n//         <Button\r\n//           fullWidth\r\n//           variant=\"outlined\"\r\n//           startIcon={\r\n//             isGoogleLoading ? <CircularProgress size={20} /> : <GoogleIcon />\r\n//           }\r\n//           onClick={handleGoogleSignUp}\r\n//           disabled={isGoogleLoading}\r\n//           sx={{ mt: 3, py: 1 }}\r\n//         >\r\n//           {isGoogleLoading ? \"Signing in...\" : \"Sign in with Google\"}\r\n//         </Button>\r\n\r\n//         <Box sx={{ position: \"relative\", width: \"100%\", my: 3 }}>\r\n//           <Divider>\r\n//             <Typography variant=\"body2\" color=\"text.secondary\">\r\n//               OR\r\n//             </Typography>\r\n//           </Divider>\r\n//         </Box>\r\n//         {error && (\r\n//           <Alert severity=\"error\" sx={{ width: \"100%\", mt: 2 }}>\r\n//             {error}\r\n//           </Alert>\r\n//         )}\r\n//         <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             id=\"email\"\r\n//             label=\"Email Address\"\r\n//             name=\"email\"\r\n//             autoComplete=\"email\"\r\n//             autoFocus\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             name=\"password\"\r\n//             label=\"Password\"\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             autoComplete=\"current-password\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//           />\r\n//           <Button\r\n//             type=\"submit\"\r\n//             fullWidth\r\n//             variant=\"contained\"\r\n//             sx={{ mt: 3, mb: 2 }}\r\n//             disabled={isLoading}\r\n//           >\r\n//             {isLoading ? (\r\n//               <>\r\n//                 <CircularProgress size={24} sx={{ mr: 1 }} color=\"inherit\" />\r\n//                 Signing In...\r\n//               </>\r\n//             ) : (\r\n//               \"Sign In\"\r\n//             )}\r\n//           </Button>\r\n//           <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n//             <Link to=\"/register\" variant=\"body2\">\r\n//               Don't have an account? Sign Up\r\n//             </Link>\r\n//             <Link to=\"/forgot-password\" variant=\"body2\">\r\n//               Forgot password?\r\n//             </Link>\r\n//           </Box>\r\n//         </Box>\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}