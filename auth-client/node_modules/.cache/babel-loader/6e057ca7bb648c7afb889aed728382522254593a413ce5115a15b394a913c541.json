{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import { createContext, useContext, useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\";\n// import jwt_decode from \"jwt-decode\";\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [token, setToken] = useState(localStorage.getItem(\"token\"));\n//   const [isLoading, setIsLoading] = useState(true);\n//   const navigate = useNavigate();\n\n//   const login = async (email, password) => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/auth/login/\",\n//         {\n//           email,\n//           password,\n//         }\n//       );\n\n//       const { access, refresh } = response.data;\n//       localStorage.setItem(\"token\", access);\n//       localStorage.setItem(\"refreshToken\", refresh);\n//       setToken(access);\n\n//       const decoded = jwt_decode(access);\n//       setUser(decoded);\n\n//       return { success: true };\n//     } catch (error) {\n//       console.error(\"Login error:\", error);\n//       return { success: false, error: error.response?.data };\n//     }\n//   };\n\n//   const logout = async () => {\n//     try {\n//       const refreshToken = localStorage.getItem(\"refreshToken\");\n//       await axios.post(\"http://localhost:8000/api/auth/logout/\", {\n//         refresh_token: refreshToken,\n//       });\n\n//       localStorage.removeItem(\"token\");\n//       localStorage.removeItem(\"refreshToken\");\n//       setToken(null);\n//       setUser(null);\n//       navigate(\"/login\");\n//     } catch (error) {\n//       console.error(\"Logout error:\", error);\n//     }\n//   };\n\n//   const register = async (formData) => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/auth/register/\",\n//         formData\n//       );\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error(\"Registration error:\", error);\n//       return { success: false, error: error.response?.data };\n//     }\n//   };\n\n//   const verifyEmail = async (token) => {\n//     try {\n//       await axios.get(\n//         `http://localhost:8000/api/auth/email-verify/?token=${token}`\n//       );\n//       return true;\n//     } catch (error) {\n//       console.error(\"Email verification error:\", error);\n//       return false;\n//     }\n//   };\n\n//   const requestPasswordReset = async (email) => {\n//     try {\n//       await axios.post(\"http://localhost:8000/api/auth/request-reset-email/\", {\n//         email,\n//       });\n//       return true;\n//     } catch (error) {\n//       console.error(\"Password reset request error:\", error);\n//       return false;\n//     }\n//   };\n\n//   const resetPassword = async (uidb64, token, password, password2) => {\n//     try {\n//       await axios.patch(\n//         \"http://localhost:8000/api/auth/password-reset-complete/\",\n//         {\n//           uidb64,\n//           token,\n//           password,\n//           password2,\n//         }\n//       );\n//       return true;\n//     } catch (error) {\n//       console.error(\"Password reset error:\", error);\n//       return false;\n//     }\n//   };\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         if (token) {\n//           const decoded = jwt_decode(token);\n//           setUser(decoded);\n\n//           // Check if token is expired\n//           const currentTime = Date.now() / 1000;\n//           if (decoded.exp < currentTime) {\n//             try {\n//               const refreshToken = localStorage.getItem(\"refreshToken\");\n//               const response = await axios.post(\n//                 \"http://localhost:8000/api/token/refresh/\",\n//                 {\n//                   refresh: refreshToken,\n//                 }\n//               );\n\n//               const newAccessToken = response.data.access;\n//               localStorage.setItem(\"token\", newAccessToken);\n//               setToken(newAccessToken);\n\n//               const newDecoded = jwt_decode(newAccessToken);\n//               setUser(newDecoded);\n//             } catch (refreshError) {\n//               logout();\n//             }\n//           }\n//         }\n//       } catch (error) {\n//         logout();\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     checkAuth();\n//   }, [token]);\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         token,\n//         isLoading,\n//         login,\n//         logout,\n//         register,\n//         verifyEmail,\n//         requestPasswordReset,\n//         resetPassword,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => useContext(AuthContext);\n\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\"; // Changed from default import to named import\nimport { TextField, Button, Container, Typography, Box, Alert } from \"@mui/material\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // ... (rest of your imports and initial code remains the same)\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        if (token) {\n          const decoded = jwtDecode(token); // Changed from jwt_decode to jwtDecode\n\n          const currentTime = Date.now() / 1000;\n          if (decoded.exp < currentTime) {\n            try {\n              const refreshToken = localStorage.getItem(\"refreshToken\");\n              const response = await axios.post(\"http://localhost:8000/api/token/refresh/\", {\n                refresh: refreshToken\n              });\n              const newAccessToken = response.data.access;\n              localStorage.setItem(\"token\", newAccessToken);\n              setToken(newAccessToken);\n              const newDecoded = jwtDecode(newAccessToken); // Changed here too\n              setUser(newDecoded);\n            } catch (refreshError) {\n              logout();\n            }\n          } else {\n            setUser(decoded);\n          }\n        }\n      } catch (error) {\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, [token]);\n\n  // ... (rest of your component code remains the same)\n};\n_s(AuthProvider, \"kylruUOWvOZDu62eJe4UZJ6Nx1s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","useNavigate","jwtDecode","TextField","Button","Container","Typography","Box","Alert","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isLoading","setIsLoading","navigate","checkAuth","decoded","currentTime","Date","now","exp","refreshToken","response","post","refresh","newAccessToken","data","access","setItem","newDecoded","refreshError","logout","error","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/ahmed/Desktop/CP/djr_auth_deep/auth-client/src/context/AuthContext.js"],"sourcesContent":["// import { createContext, useContext, useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import jwt_decode from \"jwt-decode\";\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n//   const navigate = useNavigate();\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:8000/api/auth/login/\",\r\n//         {\r\n//           email,\r\n//           password,\r\n//         }\r\n//       );\r\n\r\n//       const { access, refresh } = response.data;\r\n//       localStorage.setItem(\"token\", access);\r\n//       localStorage.setItem(\"refreshToken\", refresh);\r\n//       setToken(access);\r\n\r\n//       const decoded = jwt_decode(access);\r\n//       setUser(decoded);\r\n\r\n//       return { success: true };\r\n//     } catch (error) {\r\n//       console.error(\"Login error:\", error);\r\n//       return { success: false, error: error.response?.data };\r\n//     }\r\n//   };\r\n\r\n//   const logout = async () => {\r\n//     try {\r\n//       const refreshToken = localStorage.getItem(\"refreshToken\");\r\n//       await axios.post(\"http://localhost:8000/api/auth/logout/\", {\r\n//         refresh_token: refreshToken,\r\n//       });\r\n\r\n//       localStorage.removeItem(\"token\");\r\n//       localStorage.removeItem(\"refreshToken\");\r\n//       setToken(null);\r\n//       setUser(null);\r\n//       navigate(\"/login\");\r\n//     } catch (error) {\r\n//       console.error(\"Logout error:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const register = async (formData) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:8000/api/auth/register/\",\r\n//         formData\r\n//       );\r\n//       return { success: true, data: response.data };\r\n//     } catch (error) {\r\n//       console.error(\"Registration error:\", error);\r\n//       return { success: false, error: error.response?.data };\r\n//     }\r\n//   };\r\n\r\n//   const verifyEmail = async (token) => {\r\n//     try {\r\n//       await axios.get(\r\n//         `http://localhost:8000/api/auth/email-verify/?token=${token}`\r\n//       );\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Email verification error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const requestPasswordReset = async (email) => {\r\n//     try {\r\n//       await axios.post(\"http://localhost:8000/api/auth/request-reset-email/\", {\r\n//         email,\r\n//       });\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Password reset request error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const resetPassword = async (uidb64, token, password, password2) => {\r\n//     try {\r\n//       await axios.patch(\r\n//         \"http://localhost:8000/api/auth/password-reset-complete/\",\r\n//         {\r\n//           uidb64,\r\n//           token,\r\n//           password,\r\n//           password2,\r\n//         }\r\n//       );\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Password reset error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         if (token) {\r\n//           const decoded = jwt_decode(token);\r\n//           setUser(decoded);\r\n\r\n//           // Check if token is expired\r\n//           const currentTime = Date.now() / 1000;\r\n//           if (decoded.exp < currentTime) {\r\n//             try {\r\n//               const refreshToken = localStorage.getItem(\"refreshToken\");\r\n//               const response = await axios.post(\r\n//                 \"http://localhost:8000/api/token/refresh/\",\r\n//                 {\r\n//                   refresh: refreshToken,\r\n//                 }\r\n//               );\r\n\r\n//               const newAccessToken = response.data.access;\r\n//               localStorage.setItem(\"token\", newAccessToken);\r\n//               setToken(newAccessToken);\r\n\r\n//               const newDecoded = jwt_decode(newAccessToken);\r\n//               setUser(newDecoded);\r\n//             } catch (refreshError) {\r\n//               logout();\r\n//             }\r\n//           }\r\n//         }\r\n//       } catch (error) {\r\n//         logout();\r\n//       } finally {\r\n//         setIsLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     checkAuth();\r\n//   }, [token]);\r\n\r\n//   return (\r\n//     <AuthContext.Provider\r\n//       value={{\r\n//         user,\r\n//         token,\r\n//         isLoading,\r\n//         login,\r\n//         logout,\r\n//         register,\r\n//         verifyEmail,\r\n//         requestPasswordReset,\r\n//         resetPassword,\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { jwtDecode } from \"jwt-decode\"; // Changed from default import to named import\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Alert,\r\n} from \"@mui/material\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // ... (rest of your imports and initial code remains the same)\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        if (token) {\r\n          const decoded = jwtDecode(token); // Changed from jwt_decode to jwtDecode\r\n\r\n          const currentTime = Date.now() / 1000;\r\n          if (decoded.exp < currentTime) {\r\n            try {\r\n              const refreshToken = localStorage.getItem(\"refreshToken\");\r\n              const response = await axios.post(\r\n                \"http://localhost:8000/api/token/refresh/\",\r\n                {\r\n                  refresh: refreshToken,\r\n                }\r\n              );\r\n\r\n              const newAccessToken = response.data.access;\r\n              localStorage.setItem(\"token\", newAccessToken);\r\n              setToken(newAccessToken);\r\n\r\n              const newDecoded = jwtDecode(newAccessToken); // Changed here too\r\n              setUser(newDecoded);\r\n            } catch (refreshError) {\r\n              logout();\r\n            }\r\n          } else {\r\n            setUser(decoded);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        logout();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  // ... (rest of your component code remains the same)\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AACxC,SACEC,SAAS,EACTC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,GAAG,EACHC,KAAK,QACA,eAAe;AAEtB,MAAMC,WAAW,gBAAGb,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMc,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAACmB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMuB,QAAQ,GAAGpB,WAAW,CAAC,CAAC;;EAE9B;;EAEAF,SAAS,CAAC,MAAM;IACd,MAAMuB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,IAAIP,KAAK,EAAE;UACT,MAAMQ,OAAO,GAAGrB,SAAS,CAACa,KAAK,CAAC,CAAC,CAAC;;UAElC,MAAMS,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;UACrC,IAAIH,OAAO,CAACI,GAAG,GAAGH,WAAW,EAAE;YAC7B,IAAI;cACF,MAAMI,YAAY,GAAGX,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;cACzD,MAAMW,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,IAAI,CAC/B,0CAA0C,EAC1C;gBACEC,OAAO,EAAEH;cACX,CACF,CAAC;cAED,MAAMI,cAAc,GAAGH,QAAQ,CAACI,IAAI,CAACC,MAAM;cAC3CjB,YAAY,CAACkB,OAAO,CAAC,OAAO,EAAEH,cAAc,CAAC;cAC7ChB,QAAQ,CAACgB,cAAc,CAAC;cAExB,MAAMI,UAAU,GAAGlC,SAAS,CAAC8B,cAAc,CAAC,CAAC,CAAC;cAC9ClB,OAAO,CAACsB,UAAU,CAAC;YACrB,CAAC,CAAC,OAAOC,YAAY,EAAE;cACrBC,MAAM,CAAC,CAAC;YACV;UACF,CAAC,MAAM;YACLxB,OAAO,CAACS,OAAO,CAAC;UAClB;QACF;MACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdD,MAAM,CAAC,CAAC;MACV,CAAC,SAAS;QACRlB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDE,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;;EAEX;AACF,CAAC;AAACH,EAAA,CAjDWF,YAAY;EAAA,QAINT,WAAW;AAAA;AAAAuC,EAAA,GAJjB9B,YAAY;AAmDzB,OAAO,MAAM+B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM7C,UAAU,CAACY,WAAW,CAAC;AAAA;AAACiC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}