{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\CP\\\\New folder\\\\auth-client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// /* eslint-disable react-hooks/exhaustive-deps */\n// import { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import { jwtDecode } from 'jwt-decode';\n// import { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\n// import {auth, googleProvider} from \"../firebase\"\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [token, setToken] = useState(localStorage.getItem(\"token\"));\n//   const [isLoading, setIsLoading] = useState(true);\n//   const navigate = useNavigate();\n\n// const login = async (email, password) => {\n//       try {\n//         const response = await axios.post(\n//             \"http://127.0.0.1:8000/api/auth/login/\",\n//             { email, password }\n//         );\n\n//         const { access, refresh } = response.data;\n\n//         // Verify the user is verified before storing tokens\n//         const decoded = jwtDecode(access);\n//         if (!decoded.is_verified) {\n//             throw new Error(\"Email not verified. Please verify your email first.\");\n//         }\n\n//         localStorage.setItem(\"token\", access);\n//         localStorage.setItem(\"refreshToken\", refresh);\n//         setToken(access);\n//         setUser(decoded);\n//         console.log(\"Login response:\", response);\n//         return { success: true };\n//     } catch (error) {\n//         console.error(\"Login error:\", error);\n//         console.log(\"Login error:\", error);\n\n//         // Clear any partial authentication if verification failed\n//         if (error.message.includes(\"verified\")) {\n//             localStorage.removeItem(\"token\");\n//             localStorage.removeItem(\"refreshToken\");\n//             setToken(null);\n//             setUser(null);\n//         }\n\n//         return {\n//             success: false,\n//             error: error.response?.data?.detail ||\n//                   error.message ||\n//                   \"Login failed. Please try again.\"\n//         };\n//     }\n// };\n\n// const loginWithGoogle = async () => {\n//     try {\n\n//       // Configure popup settings to handle COOP issues\n//       const auth = getAuth();\n//       const provider = new GoogleAuthProvider();\n//       // Add these settings\n//       auth.settings.appVerificationDisabledForTesting = true;\n\n//       // Sign in with Google popup\n//       const result = await signInWithPopup(auth, googleProvider);\n\n//       // Get the Firebase ID token\n//       const idToken = await result.user.getIdToken();\n\n//       // Send the token to your backend\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/firebase-login/\",\n//         { idToken }\n//       );\n\n//       const { access, refresh } = response.data;\n\n//       localStorage.setItem(\"token\", access);\n//       localStorage.setItem(\"refreshToken\", refresh);\n//       setToken(access);\n//       setUser(response.data.user);\n\n//       console.log(\"Google login response.data:\", response.data);\n//       console.log(\"Google login response.data.user:\", response.data.user);\n//       console.log(\"Google login Result is\", result);\n//       console.log(\"idToken is\", idToken);\n//       console.log(\"google auth provider\", provider);\n//       return { success: true };\n//     } catch (error) {\n//       console.error(\"Google login error:\", error);\n//       return {\n//         success: false,\n//         error: error.response?.data?.error ||\n//               error.message ||\n//               \"Google login failed. Please try again.\"\n//       };\n//     }\n// };\n\n// const logout = async () => {\n//     try {\n//         const refreshToken = localStorage.getItem('refreshToken');\n\n//         // Attempt to logout with the backend\n//         try {\n//             await axios.post('http://localhost:8000/api/auth/logout/',\n//                 { refresh_token: refreshToken },\n//                 {\n//                     headers: {\n//                         'Authorization': `Bearer ${token}`,\n//                         'Content-Type': 'application/json'\n//                     }\n//                 }\n//             );\n//         } catch (error) {\n//             // If the error is due to expired access token, try without it\n//             if (error.response?.data?.code === 'token_not_valid') {\n//                 await axios.post('http://localhost:8000/api/auth/logout/',\n//                     { refresh_token: refreshToken },\n//                     {\n//                         headers: {\n//                             'Content-Type': 'application/json'\n//                         }\n//                     }\n//                 );\n//             } else {\n//                 console.error('Logout error:', error);\n//             }\n//         }\n\n//         // Sign out from Firebase if needed\n//         try {\n//           await auth.signOut();\n//         } catch (fbError) {\n//           console.error('Firebase logout error:', fbError);\n//         }\n\n//         // Clear local storage and state regardless of backend response\n//         localStorage.removeItem('token');\n//         localStorage.removeItem('refreshToken');\n//         setToken(null);\n//         setUser(null);\n//         navigate('/login');\n//     } catch (error) {\n//         console.error('Logout error:', error);\n\n//         // Ensure we always clear local storage and state\n//         localStorage.removeItem('token');\n//         localStorage.removeItem('refreshToken');\n//         setToken(null);\n//         setUser(null);\n//         navigate('/login');\n//     }\n// };\n\n//   const register = async (formData) => {\n//     try {\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/register/\",\n//         formData\n//       );\n//       console.log(\"Registration response:\", response);\n//       return { success: true, data: response.data, };\n//     } catch (error) {\n//       console.log(\"Registration error:\", error);\n//       console.error(\"Registration error:\", error);\n//       return { success: false, error: error.response?.data };\n//     }\n//   };\n\n//   const verifyEmail = async (email, code) => {\n//       try {\n//           const response = await axios.post(\n//               \"http://127.0.0.1:8000/api/auth/verify-email/\",\n//               { email, code }\n//           );\n//           console.log(\"Email verification response:\", response);\n//           return true;\n//       } catch (error) {\n//           console.error(\"Email verification error:\", error);\n//           console.log(\"Email verification error:\", error);\n//           return false;\n//       }\n//   };\n\n//   const requestPasswordReset = async (email) => {\n//     try {\n//       const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\n//         email,\n//       });\n//       console.log(\"Password reset request response:\", response);\n//       return true;\n//     } catch (error) {\n//       console.error(\"Password reset request error:\", error);\n//       console.log(\"Password reset request error:\", error);\n//       return false;\n//     }\n//   };\n\n//   const resetPassword = async (uidb64, token, password, password2) => {\n//     try {\n//       const response = await axios.patch(\n//         \"http://127.0.0.1:8000/api/auth/password-reset-complete/\",\n//         {\n//           uidb64,\n//           token,\n//           password,\n//           password2,\n//         }\n//       );\n//       console.log(\"Password reset response:\", response);\n//       return true;\n//     } catch (error) {\n//       console.error(\"Password reset error:\", error);\n//       console.log(\"Password reset error:\", error);\n//       return false;\n//     }\n//   };\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         if (token) {\n//           const decoded = jwtDecode(token);\n//           setUser(decoded);\n\n//           // Check if token is expired\n//           const currentTime = Date.now() / 1000;\n//           if (decoded.exp < currentTime) {\n//             try {\n//               const refreshToken = localStorage.getItem(\"refreshToken\");\n//               const response = await axios.post(\n//                 \"http://127.0.0.1:8000/api/token/refresh/\",\n//                 {\n//                   refresh: refreshToken,\n//                 }\n//               );\n\n//               const newAccessToken = response.data.access;\n//               localStorage.setItem(\"token\", newAccessToken);\n//               setToken(newAccessToken);\n\n//               const newDecoded = jwtDecode(newAccessToken);\n//               setUser(newDecoded);\n//             } catch (refreshError) {\n//               logout();\n//             }\n//           }\n//         }\n//       } catch (error) {\n//         logout();\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     checkAuth();\n//   }, [token]);\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         token,\n//         isLoading,\n//         login,\n//         logout,\n//         register,\n//         verifyEmail,\n//         requestPasswordReset,\n//         resetPassword,\n//         loginWithGoogle,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => useContext(AuthContext);\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { auth, googleProvider } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/login/\", {\n        email,\n        password\n      });\n      const {\n        access,\n        refresh,\n        user: userData\n      } = response.data;\n\n      // Verify the user is verified before storing tokens\n      const decoded = jwtDecode(access);\n      if (!decoded.is_verified) {\n        throw new Error(\"Email not verified. Please verify your email first.\");\n      }\n      localStorage.setItem(\"token\", access);\n      localStorage.setItem(\"refreshToken\", refresh);\n      setToken(access);\n\n      // Store the complete user object from the response, including image URL\n      setUser(userData || decoded);\n      console.log(\"Login response:\", response);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Login error:\", error);\n      console.log(\"Login error:\", error);\n\n      // Clear any partial authentication if verification failed\n      if (error.message.includes(\"verified\")) {\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"refreshToken\");\n        setToken(null);\n        setUser(null);\n      }\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || \"Login failed. Please try again.\"\n      };\n    }\n  };\n\n  // const loginWithGoogle = async () => {\n  //   try {\n  //     // Configure popup settings to handle COOP issues\n  //     const auth = getAuth();\n  //     const provider = new GoogleAuthProvider();\n  //     // Add these settings\n  //     auth.settings.appVerificationDisabledForTesting = true;\n\n  //     // Sign in with Google popup\n  //     const result = await signInWithPopup(auth, googleProvider);\n\n  //     // Get the Firebase ID token\n  //     const idToken = await result.user.getIdToken();\n\n  //     // Send the token to your backend\n  //     const response = await axios.post(\n  //       \"http://127.0.0.1:8000/api/auth/firebase-login/\",\n  //       { idToken }\n  //     );\n\n  //     const { access, refresh, user: userData } = response.data;\n\n  //     localStorage.setItem(\"token\", access);\n  //     localStorage.setItem(\"refreshToken\", refresh);\n  //     setToken(access);\n  //     setUser(userData);\n\n  //     console.log(\"Google login response.data:\", response.data);\n  //     console.log(\"Google login response.data.user:\", response.data.user);\n  //     console.log(\"Google login Result is\", result);\n  //     console.log(\"idToken is\", idToken);\n  //     console.log(\"google auth provider\", provider);\n  //     return { success: true };\n  //   } catch (error) {\n  //     console.error(\"Google login error:\", error);\n  //     return {\n  //       success: false,\n  //       error:\n  //         error.response?.data?.error ||\n  //         error.message ||\n  //         \"Google login failed. Please try again.\",\n  //     };\n  //   }\n  // };\n\n  // 2nd copy\n  // const loginWithGoogle = async () => {\n  //   try {\n  //     // Configure popup settings to handle COOP issues\n  //     const auth = getAuth();\n  //     const provider = new GoogleAuthProvider();\n  //     // Add these settings\n  //     auth.settings.appVerificationDisabledForTesting = true;\n\n  //     // Sign in with Google popup\n  //     const result = await signInWithPopup(auth, googleProvider);\n\n  //     // Get the Firebase ID token\n  //     const idToken = await result.user.getIdToken();\n\n  //     // Send the token to your backend\n  //     const response = await axios.post(\n  //       \"http://127.0.0.1:8000/api/auth/firebase-login/\",\n  //       {\n  //         idToken,\n  //         // Pass the photoURL explicitly in case you want to update it on the backend\n  //         photoURL: result.user.photoURL,\n  //       }\n  //     );\n\n  //     const { access, refresh, user: userData } = response.data;\n\n  //     localStorage.setItem(\"token\", access);\n  //     localStorage.setItem(\"refreshToken\", refresh);\n  //     setToken(access);\n  //     setUser(userData);\n\n  //     console.log(\"Google login response.data:\", response.data);\n  //     return { success: true };\n  //   } catch (error) {\n  //     console.error(\"Google login error:\", error);\n  //     return {\n  //       success: false,\n  //       error:\n  //         error.response?.data?.error ||\n  //         error.message ||\n  //         \"Google login failed. Please try again.\",\n  //     };\n  //   }\n  // };\n\n  // 3rd copy\n  const loginWithGoogle = async () => {\n    try {\n      // Configure popup settings to handle COOP issues\n      const auth = getAuth();\n      const provider = new GoogleAuthProvider();\n      // Add these settings\n      auth.settings.appVerificationDisabledForTesting = true;\n\n      // Sign in with Google popup\n      const result = await signInWithPopup(auth, googleProvider);\n\n      // Get the Firebase ID token\n      const idToken = await result.user.getIdToken();\n\n      // Get user details including profile picture\n      const photoURL = result.user.photoURL;\n      const displayName = result.user.displayName;\n      const email = result.user.email;\n      console.log(\"Google user details:\", {\n        photoURL,\n        displayName,\n        email\n      });\n\n      // Send the token and user details to your backend\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/firebase-login/\", {\n        idToken,\n        photoURL,\n        displayName,\n        email\n      });\n      const {\n        access,\n        refresh,\n        user: userData\n      } = response.data;\n      localStorage.setItem(\"token\", access);\n      localStorage.setItem(\"refreshToken\", refresh);\n      setToken(access);\n      setUser(userData);\n      console.log(\"Google login response:\", response.data);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error(\"Google login error:\", error);\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || \"Google login failed. Please try again.\"\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n\n      // Attempt to logout with the backend\n      try {\n        await axios.post(\"http://localhost:8000/api/auth/logout/\", {\n          refresh_token: refreshToken\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      } catch (error) {\n        var _error$response3, _error$response3$data;\n        // If the error is due to expired access token, try without it\n        if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.code) === \"token_not_valid\") {\n          await axios.post(\"http://localhost:8000/api/auth/logout/\", {\n            refresh_token: refreshToken\n          }, {\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n        } else {\n          console.error(\"Logout error:\", error);\n        }\n      }\n\n      // Sign out from Firebase if needed\n      try {\n        await auth.signOut();\n      } catch (fbError) {\n        console.error(\"Firebase logout error:\", fbError);\n      }\n\n      // Clear local storage and state regardless of backend response\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"refreshToken\");\n      setToken(null);\n      setUser(null);\n      navigate(\"/login\");\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n\n      // Ensure we always clear local storage and state\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"refreshToken\");\n      setToken(null);\n      setUser(null);\n      navigate(\"/login\");\n    }\n  };\n  const register = async formData => {\n    try {\n      // Check if FormData is being used (for image upload)\n      const isFormData = formData instanceof FormData;\n\n      // Set up the appropriate content type\n      const config = {\n        headers: {\n          \"Content-Type\": isFormData ? \"multipart/form-data\" : \"application/json\"\n        }\n      };\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/register/\", formData, config);\n      console.log(\"Registration response:\", response);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4;\n      console.log(\"Registration error:\", error);\n      console.error(\"Registration error:\", error);\n      return {\n        success: false,\n        error: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data\n      };\n    }\n  };\n  const verifyEmail = async (email, code) => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/verify-email/\", {\n        email,\n        code\n      });\n\n      // Store user data and tokens if available in the verification response\n      if (response.data.access && response.data.refresh) {\n        setUser(response.data.user);\n      }\n      console.log(\"Email verification response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      console.log(\"Email verification error:\", error);\n      return false;\n    }\n  };\n  const requestPasswordReset = async email => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\n        email\n      });\n      console.log(\"Password reset request response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      console.log(\"Password reset request error:\", error);\n      return false;\n    }\n  };\n  const resetPassword = async (uidb64, token, password, password2) => {\n    try {\n      const response = await axios.patch(\"http://127.0.0.1:8000/api/auth/password-reset-complete/\", {\n        uidb64,\n        token,\n        password,\n        password2\n      });\n      console.log(\"Password reset response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      console.log(\"Password reset error:\", error);\n      return false;\n    }\n  };\n  const updateProfile = async updateData => {\n    try {\n      // Determine if we have a FormData object (for image uploads)\n      const isFormData = updateData instanceof FormData;\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": isFormData ? \"multipart/form-data\" : \"application/json\"\n        }\n      };\n      const response = await axios.patch(\"http://127.0.0.1:8000/api/auth/profile/\", updateData, config);\n\n      // Update the user data in state\n      setUser(response.data);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response5;\n      console.error(\"Profile update error:\", error);\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || \"Failed to update profile\"\n      };\n    }\n  };\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        if (token) {\n          const decoded = jwtDecode(token);\n\n          // Check if token is expired\n          const currentTime = Date.now() / 1000;\n          if (decoded.exp < currentTime) {\n            try {\n              const refreshToken = localStorage.getItem(\"refreshToken\");\n              const response = await axios.post(\"http://127.0.0.1:8000/api/token/refresh/\", {\n                refresh: refreshToken\n              });\n              const newAccessToken = response.data.access;\n              localStorage.setItem(\"token\", newAccessToken);\n              setToken(newAccessToken);\n\n              // If there's user data in the response, use that instead of just the decoded token\n              if (response.data.user) {\n                setUser(response.data.user);\n              } else {\n                const newDecoded = jwtDecode(newAccessToken);\n                setUser(newDecoded);\n              }\n            } catch (refreshError) {\n              logout();\n            }\n          } else {\n            // If we have user data in state, keep using it\n            // Otherwise, try to get the full user profile\n            if (!user) {\n              try {\n                const response = await axios.get(\"http://127.0.0.1:8000/api/auth/profile/\", {\n                  headers: {\n                    Authorization: `Bearer ${token}`\n                  }\n                });\n                setUser(response.data);\n              } catch (profileError) {\n                // If profile fetch fails, fall back to decoded token data\n                setUser(decoded);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isLoading,\n      login,\n      logout,\n      register,\n      verifyEmail,\n      requestPasswordReset,\n      resetPassword,\n      loginWithGoogle,\n      updateProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 741,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"kylruUOWvOZDu62eJe4UZJ6Nx1s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","useNavigate","jwtDecode","getAuth","GoogleAuthProvider","signInWithPopup","auth","googleProvider","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isLoading","setIsLoading","navigate","login","email","password","response","post","access","refresh","userData","data","decoded","is_verified","Error","setItem","console","log","success","error","_error$response","_error$response$data","message","includes","removeItem","detail","loginWithGoogle","provider","settings","appVerificationDisabledForTesting","result","idToken","getIdToken","photoURL","displayName","_error$response2","_error$response2$data","logout","refreshToken","refresh_token","headers","Authorization","_error$response3","_error$response3$data","code","signOut","fbError","register","formData","isFormData","FormData","config","_error$response4","verifyEmail","requestPasswordReset","resetPassword","uidb64","password2","patch","updateProfile","updateData","_error$response5","checkAuth","currentTime","Date","now","exp","newAccessToken","newDecoded","refreshError","get","profileError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/ahmed/Desktop/CP/New folder/auth-client/src/context/AuthContext.js"],"sourcesContent":["// /* eslint-disable react-hooks/exhaustive-deps */\r\n// import { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { jwtDecode } from 'jwt-decode';\r\n// import { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\r\n// import {auth, googleProvider} from \"../firebase\"\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n//   const navigate = useNavigate();\r\n\r\n// const login = async (email, password) => {\r\n//       try {\r\n//         const response = await axios.post(\r\n//             \"http://127.0.0.1:8000/api/auth/login/\",\r\n//             { email, password }\r\n//         );\r\n\r\n//         const { access, refresh } = response.data;\r\n\r\n//         // Verify the user is verified before storing tokens\r\n//         const decoded = jwtDecode(access);\r\n//         if (!decoded.is_verified) {\r\n//             throw new Error(\"Email not verified. Please verify your email first.\");\r\n//         }\r\n\r\n//         localStorage.setItem(\"token\", access);\r\n//         localStorage.setItem(\"refreshToken\", refresh);\r\n//         setToken(access);\r\n//         setUser(decoded);\r\n//         console.log(\"Login response:\", response);\r\n//         return { success: true };\r\n//     } catch (error) {\r\n//         console.error(\"Login error:\", error);\r\n//         console.log(\"Login error:\", error);\r\n\r\n//         // Clear any partial authentication if verification failed\r\n//         if (error.message.includes(\"verified\")) {\r\n//             localStorage.removeItem(\"token\");\r\n//             localStorage.removeItem(\"refreshToken\");\r\n//             setToken(null);\r\n//             setUser(null);\r\n//         }\r\n\r\n//         return {\r\n//             success: false,\r\n//             error: error.response?.data?.detail ||\r\n//                   error.message ||\r\n//                   \"Login failed. Please try again.\"\r\n//         };\r\n//     }\r\n// };\r\n\r\n// const loginWithGoogle = async () => {\r\n//     try {\r\n\r\n//       // Configure popup settings to handle COOP issues\r\n//       const auth = getAuth();\r\n//       const provider = new GoogleAuthProvider();\r\n//       // Add these settings\r\n//       auth.settings.appVerificationDisabledForTesting = true;\r\n\r\n//       // Sign in with Google popup\r\n//       const result = await signInWithPopup(auth, googleProvider);\r\n\r\n//       // Get the Firebase ID token\r\n//       const idToken = await result.user.getIdToken();\r\n\r\n//       // Send the token to your backend\r\n//       const response = await axios.post(\r\n//         \"http://127.0.0.1:8000/api/auth/firebase-login/\",\r\n//         { idToken }\r\n//       );\r\n\r\n//       const { access, refresh } = response.data;\r\n\r\n//       localStorage.setItem(\"token\", access);\r\n//       localStorage.setItem(\"refreshToken\", refresh);\r\n//       setToken(access);\r\n//       setUser(response.data.user);\r\n\r\n//       console.log(\"Google login response.data:\", response.data);\r\n//       console.log(\"Google login response.data.user:\", response.data.user);\r\n//       console.log(\"Google login Result is\", result);\r\n//       console.log(\"idToken is\", idToken);\r\n//       console.log(\"google auth provider\", provider);\r\n//       return { success: true };\r\n//     } catch (error) {\r\n//       console.error(\"Google login error:\", error);\r\n//       return {\r\n//         success: false,\r\n//         error: error.response?.data?.error ||\r\n//               error.message ||\r\n//               \"Google login failed. Please try again.\"\r\n//       };\r\n//     }\r\n// };\r\n\r\n// const logout = async () => {\r\n//     try {\r\n//         const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n//         // Attempt to logout with the backend\r\n//         try {\r\n//             await axios.post('http://localhost:8000/api/auth/logout/',\r\n//                 { refresh_token: refreshToken },\r\n//                 {\r\n//                     headers: {\r\n//                         'Authorization': `Bearer ${token}`,\r\n//                         'Content-Type': 'application/json'\r\n//                     }\r\n//                 }\r\n//             );\r\n//         } catch (error) {\r\n//             // If the error is due to expired access token, try without it\r\n//             if (error.response?.data?.code === 'token_not_valid') {\r\n//                 await axios.post('http://localhost:8000/api/auth/logout/',\r\n//                     { refresh_token: refreshToken },\r\n//                     {\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json'\r\n//                         }\r\n//                     }\r\n//                 );\r\n//             } else {\r\n//                 console.error('Logout error:', error);\r\n//             }\r\n//         }\r\n\r\n//         // Sign out from Firebase if needed\r\n//         try {\r\n//           await auth.signOut();\r\n//         } catch (fbError) {\r\n//           console.error('Firebase logout error:', fbError);\r\n//         }\r\n\r\n//         // Clear local storage and state regardless of backend response\r\n//         localStorage.removeItem('token');\r\n//         localStorage.removeItem('refreshToken');\r\n//         setToken(null);\r\n//         setUser(null);\r\n//         navigate('/login');\r\n//     } catch (error) {\r\n//         console.error('Logout error:', error);\r\n\r\n//         // Ensure we always clear local storage and state\r\n//         localStorage.removeItem('token');\r\n//         localStorage.removeItem('refreshToken');\r\n//         setToken(null);\r\n//         setUser(null);\r\n//         navigate('/login');\r\n//     }\r\n// };\r\n\r\n//   const register = async (formData) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://127.0.0.1:8000/api/auth/register/\",\r\n//         formData\r\n//       );\r\n//       console.log(\"Registration response:\", response);\r\n//       return { success: true, data: response.data, };\r\n//     } catch (error) {\r\n//       console.log(\"Registration error:\", error);\r\n//       console.error(\"Registration error:\", error);\r\n//       return { success: false, error: error.response?.data };\r\n//     }\r\n//   };\r\n\r\n//   const verifyEmail = async (email, code) => {\r\n//       try {\r\n//           const response = await axios.post(\r\n//               \"http://127.0.0.1:8000/api/auth/verify-email/\",\r\n//               { email, code }\r\n//           );\r\n//           console.log(\"Email verification response:\", response);\r\n//           return true;\r\n//       } catch (error) {\r\n//           console.error(\"Email verification error:\", error);\r\n//           console.log(\"Email verification error:\", error);\r\n//           return false;\r\n//       }\r\n//   };\r\n\r\n//   const requestPasswordReset = async (email) => {\r\n//     try {\r\n//       const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\r\n//         email,\r\n//       });\r\n//       console.log(\"Password reset request response:\", response);\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Password reset request error:\", error);\r\n//       console.log(\"Password reset request error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const resetPassword = async (uidb64, token, password, password2) => {\r\n//     try {\r\n//       const response = await axios.patch(\r\n//         \"http://127.0.0.1:8000/api/auth/password-reset-complete/\",\r\n//         {\r\n//           uidb64,\r\n//           token,\r\n//           password,\r\n//           password2,\r\n//         }\r\n//       );\r\n//       console.log(\"Password reset response:\", response);\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Password reset error:\", error);\r\n//       console.log(\"Password reset error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         if (token) {\r\n//           const decoded = jwtDecode(token);\r\n//           setUser(decoded);\r\n\r\n//           // Check if token is expired\r\n//           const currentTime = Date.now() / 1000;\r\n//           if (decoded.exp < currentTime) {\r\n//             try {\r\n//               const refreshToken = localStorage.getItem(\"refreshToken\");\r\n//               const response = await axios.post(\r\n//                 \"http://127.0.0.1:8000/api/token/refresh/\",\r\n//                 {\r\n//                   refresh: refreshToken,\r\n//                 }\r\n//               );\r\n\r\n//               const newAccessToken = response.data.access;\r\n//               localStorage.setItem(\"token\", newAccessToken);\r\n//               setToken(newAccessToken);\r\n\r\n//               const newDecoded = jwtDecode(newAccessToken);\r\n//               setUser(newDecoded);\r\n//             } catch (refreshError) {\r\n//               logout();\r\n//             }\r\n//           }\r\n//         }\r\n//       } catch (error) {\r\n//         logout();\r\n//       } finally {\r\n//         setIsLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     checkAuth();\r\n//   }, [token]);\r\n\r\n//   return (\r\n//     <AuthContext.Provider\r\n//       value={{\r\n//         user,\r\n//         token,\r\n//         isLoading,\r\n//         login,\r\n//         logout,\r\n//         register,\r\n//         verifyEmail,\r\n//         requestPasswordReset,\r\n//         resetPassword,\r\n//         loginWithGoogle,\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\nimport { auth, googleProvider } from \"../firebase\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8000/api/auth/login/\",\r\n        { email, password }\r\n      );\r\n\r\n      const { access, refresh, user: userData } = response.data;\r\n\r\n      // Verify the user is verified before storing tokens\r\n      const decoded = jwtDecode(access);\r\n      if (!decoded.is_verified) {\r\n        throw new Error(\"Email not verified. Please verify your email first.\");\r\n      }\r\n\r\n      localStorage.setItem(\"token\", access);\r\n      localStorage.setItem(\"refreshToken\", refresh);\r\n      setToken(access);\r\n\r\n      // Store the complete user object from the response, including image URL\r\n      setUser(userData || decoded);\r\n\r\n      console.log(\"Login response:\", response);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      console.log(\"Login error:\", error);\r\n\r\n      // Clear any partial authentication if verification failed\r\n      if (error.message.includes(\"verified\")) {\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"refreshToken\");\r\n        setToken(null);\r\n        setUser(null);\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.response?.data?.detail ||\r\n          error.message ||\r\n          \"Login failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  // const loginWithGoogle = async () => {\r\n  //   try {\r\n  //     // Configure popup settings to handle COOP issues\r\n  //     const auth = getAuth();\r\n  //     const provider = new GoogleAuthProvider();\r\n  //     // Add these settings\r\n  //     auth.settings.appVerificationDisabledForTesting = true;\r\n\r\n  //     // Sign in with Google popup\r\n  //     const result = await signInWithPopup(auth, googleProvider);\r\n\r\n  //     // Get the Firebase ID token\r\n  //     const idToken = await result.user.getIdToken();\r\n\r\n  //     // Send the token to your backend\r\n  //     const response = await axios.post(\r\n  //       \"http://127.0.0.1:8000/api/auth/firebase-login/\",\r\n  //       { idToken }\r\n  //     );\r\n\r\n  //     const { access, refresh, user: userData } = response.data;\r\n\r\n  //     localStorage.setItem(\"token\", access);\r\n  //     localStorage.setItem(\"refreshToken\", refresh);\r\n  //     setToken(access);\r\n  //     setUser(userData);\r\n\r\n  //     console.log(\"Google login response.data:\", response.data);\r\n  //     console.log(\"Google login response.data.user:\", response.data.user);\r\n  //     console.log(\"Google login Result is\", result);\r\n  //     console.log(\"idToken is\", idToken);\r\n  //     console.log(\"google auth provider\", provider);\r\n  //     return { success: true };\r\n  //   } catch (error) {\r\n  //     console.error(\"Google login error:\", error);\r\n  //     return {\r\n  //       success: false,\r\n  //       error:\r\n  //         error.response?.data?.error ||\r\n  //         error.message ||\r\n  //         \"Google login failed. Please try again.\",\r\n  //     };\r\n  //   }\r\n  // };\r\n\r\n  // 2nd copy\r\n  // const loginWithGoogle = async () => {\r\n  //   try {\r\n  //     // Configure popup settings to handle COOP issues\r\n  //     const auth = getAuth();\r\n  //     const provider = new GoogleAuthProvider();\r\n  //     // Add these settings\r\n  //     auth.settings.appVerificationDisabledForTesting = true;\r\n\r\n  //     // Sign in with Google popup\r\n  //     const result = await signInWithPopup(auth, googleProvider);\r\n\r\n  //     // Get the Firebase ID token\r\n  //     const idToken = await result.user.getIdToken();\r\n\r\n  //     // Send the token to your backend\r\n  //     const response = await axios.post(\r\n  //       \"http://127.0.0.1:8000/api/auth/firebase-login/\",\r\n  //       {\r\n  //         idToken,\r\n  //         // Pass the photoURL explicitly in case you want to update it on the backend\r\n  //         photoURL: result.user.photoURL,\r\n  //       }\r\n  //     );\r\n\r\n  //     const { access, refresh, user: userData } = response.data;\r\n\r\n  //     localStorage.setItem(\"token\", access);\r\n  //     localStorage.setItem(\"refreshToken\", refresh);\r\n  //     setToken(access);\r\n  //     setUser(userData);\r\n\r\n  //     console.log(\"Google login response.data:\", response.data);\r\n  //     return { success: true };\r\n  //   } catch (error) {\r\n  //     console.error(\"Google login error:\", error);\r\n  //     return {\r\n  //       success: false,\r\n  //       error:\r\n  //         error.response?.data?.error ||\r\n  //         error.message ||\r\n  //         \"Google login failed. Please try again.\",\r\n  //     };\r\n  //   }\r\n  // };\r\n\r\n  // 3rd copy\r\n  const loginWithGoogle = async () => {\r\n    try {\r\n      // Configure popup settings to handle COOP issues\r\n      const auth = getAuth();\r\n      const provider = new GoogleAuthProvider();\r\n      // Add these settings\r\n      auth.settings.appVerificationDisabledForTesting = true;\r\n  \r\n      // Sign in with Google popup\r\n      const result = await signInWithPopup(auth, googleProvider);\r\n  \r\n      // Get the Firebase ID token\r\n      const idToken = await result.user.getIdToken();\r\n  \r\n      // Get user details including profile picture\r\n      const photoURL = result.user.photoURL;\r\n      const displayName = result.user.displayName;\r\n      const email = result.user.email;\r\n  \r\n      console.log(\"Google user details:\", {\r\n        photoURL, \r\n        displayName,\r\n        email\r\n      });\r\n  \r\n      // Send the token and user details to your backend\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8000/api/auth/firebase-login/\",\r\n        { \r\n          idToken,\r\n          photoURL,\r\n          displayName,\r\n          email\r\n        }\r\n      );\r\n  \r\n      const { access, refresh, user: userData } = response.data;\r\n  \r\n      localStorage.setItem(\"token\", access);\r\n      localStorage.setItem(\"refreshToken\", refresh);\r\n      setToken(access);\r\n      setUser(userData);\r\n  \r\n      console.log(\"Google login response:\", response.data);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Google login error:\", error);\r\n      return {\r\n        success: false,\r\n        error:\r\n          error.response?.data?.error ||\r\n          error.message ||\r\n          \"Google login failed. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem(\"refreshToken\");\r\n\r\n      // Attempt to logout with the backend\r\n      try {\r\n        await axios.post(\r\n          \"http://localhost:8000/api/auth/logout/\",\r\n          { refresh_token: refreshToken },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n      } catch (error) {\r\n        // If the error is due to expired access token, try without it\r\n        if (error.response?.data?.code === \"token_not_valid\") {\r\n          await axios.post(\r\n            \"http://localhost:8000/api/auth/logout/\",\r\n            { refresh_token: refreshToken },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n        } else {\r\n          console.error(\"Logout error:\", error);\r\n        }\r\n      }\r\n\r\n      // Sign out from Firebase if needed\r\n      try {\r\n        await auth.signOut();\r\n      } catch (fbError) {\r\n        console.error(\"Firebase logout error:\", fbError);\r\n      }\r\n\r\n      // Clear local storage and state regardless of backend response\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"refreshToken\");\r\n      setToken(null);\r\n      setUser(null);\r\n      navigate(\"/login\");\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n\r\n      // Ensure we always clear local storage and state\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"refreshToken\");\r\n      setToken(null);\r\n      setUser(null);\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  const register = async (formData) => {\r\n    try {\r\n      // Check if FormData is being used (for image upload)\r\n      const isFormData = formData instanceof FormData;\r\n\r\n      // Set up the appropriate content type\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": isFormData\r\n            ? \"multipart/form-data\"\r\n            : \"application/json\",\r\n        },\r\n      };\r\n\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8000/api/auth/register/\",\r\n        formData,\r\n        config\r\n      );\r\n\r\n      console.log(\"Registration response:\", response);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      console.log(\"Registration error:\", error);\r\n      console.error(\"Registration error:\", error);\r\n      return { success: false, error: error.response?.data };\r\n    }\r\n  };\r\n\r\n  const verifyEmail = async (email, code) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8000/api/auth/verify-email/\",\r\n        { email, code }\r\n      );\r\n\r\n      // Store user data and tokens if available in the verification response\r\n      if (response.data.access && response.data.refresh) {\r\n        setUser(response.data.user);\r\n      }\r\n\r\n      console.log(\"Email verification response:\", response);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Email verification error:\", error);\r\n      console.log(\"Email verification error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const requestPasswordReset = async (email) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8000/api/auth/request-reset-email/\",\r\n        {\r\n          email,\r\n        }\r\n      );\r\n      console.log(\"Password reset request response:\", response);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Password reset request error:\", error);\r\n      console.log(\"Password reset request error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (uidb64, token, password, password2) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        \"http://127.0.0.1:8000/api/auth/password-reset-complete/\",\r\n        {\r\n          uidb64,\r\n          token,\r\n          password,\r\n          password2,\r\n        }\r\n      );\r\n      console.log(\"Password reset response:\", response);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Password reset error:\", error);\r\n      console.log(\"Password reset error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updateData) => {\r\n    try {\r\n      // Determine if we have a FormData object (for image uploads)\r\n      const isFormData = updateData instanceof FormData;\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": isFormData\r\n            ? \"multipart/form-data\"\r\n            : \"application/json\",\r\n        },\r\n      };\r\n\r\n      const response = await axios.patch(\r\n        \"http://127.0.0.1:8000/api/auth/profile/\",\r\n        updateData,\r\n        config\r\n      );\r\n\r\n      // Update the user data in state\r\n      setUser(response.data);\r\n\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      console.error(\"Profile update error:\", error);\r\n      return {\r\n        success: false,\r\n        error: error.response?.data || \"Failed to update profile\",\r\n      };\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        if (token) {\r\n          const decoded = jwtDecode(token);\r\n\r\n          // Check if token is expired\r\n          const currentTime = Date.now() / 1000;\r\n          if (decoded.exp < currentTime) {\r\n            try {\r\n              const refreshToken = localStorage.getItem(\"refreshToken\");\r\n              const response = await axios.post(\r\n                \"http://127.0.0.1:8000/api/token/refresh/\",\r\n                {\r\n                  refresh: refreshToken,\r\n                }\r\n              );\r\n\r\n              const newAccessToken = response.data.access;\r\n              localStorage.setItem(\"token\", newAccessToken);\r\n              setToken(newAccessToken);\r\n\r\n              // If there's user data in the response, use that instead of just the decoded token\r\n              if (response.data.user) {\r\n                setUser(response.data.user);\r\n              } else {\r\n                const newDecoded = jwtDecode(newAccessToken);\r\n                setUser(newDecoded);\r\n              }\r\n            } catch (refreshError) {\r\n              logout();\r\n            }\r\n          } else {\r\n            // If we have user data in state, keep using it\r\n            // Otherwise, try to get the full user profile\r\n            if (!user) {\r\n              try {\r\n                const response = await axios.get(\r\n                  \"http://127.0.0.1:8000/api/auth/profile/\",\r\n                  {\r\n                    headers: {\r\n                      Authorization: `Bearer ${token}`,\r\n                    },\r\n                  }\r\n                );\r\n                setUser(response.data);\r\n              } catch (profileError) {\r\n                // If profile fetch fails, fall back to decoded token data\r\n                setUser(decoded);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        logout();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        isLoading,\r\n        login,\r\n        logout,\r\n        register,\r\n        verifyEmail,\r\n        requestPasswordReset,\r\n        resetPassword,\r\n        loginWithGoogle,\r\n        updateProfile,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}