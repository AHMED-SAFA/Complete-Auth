{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\CP\\\\djr_auth_deep\\\\auth-client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n// Import Firebase\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Your Firebase configuration - Replace with your own config\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"YOUR_AUTH_DOMAIN\",\n  projectId: \"YOUR_PROJECT_ID\",\n  storageBucket: \"YOUR_STORAGE_BUCKET\",\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n  appId: \"YOUR_APP_ID\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  //   const login = async (email, password) => {\n  //     try {\n  //         const response = await axios.post(\n  //             \"http://127.0.0.1:8000/api/auth/login/\",\n  //             { email, password }\n  //         );\n\n  //         const { access, refresh } = response.data;\n\n  //         // Verify the user is verified before storing tokens\n  //         const decoded = jwtDecode(access);\n  //         if (!decoded.is_verified) {\n  //             throw new Error(\"Email not verified. Please verify your email first.\");\n  //         }\n\n  //         localStorage.setItem(\"token\", access);\n  //         localStorage.setItem(\"refreshToken\", refresh);\n  //         setToken(access);\n  //         setUser(decoded);\n  //         console.log(\"Login response:\", response);\n  //         return { success: true };\n  //     } catch (error) {\n  //         console.error(\"Login error:\", error);\n  //         console.log(\"Login error:\", error);\n\n  //         // Clear any partial authentication if verification failed\n  //         if (error.message.includes(\"verified\")) {\n  //             localStorage.removeItem(\"token\");\n  //             localStorage.removeItem(\"refreshToken\");\n  //             setToken(null);\n  //             setUser(null);\n  //         }\n\n  //         return { \n  //             success: false, \n  //             error: error.response?.data?.detail || \n  //                   error.message || \n  //                   \"Login failed. Please try again.\" \n  //         };\n  //     }\n  // };\n\n  //   const logout = async () => {\n  //     try {\n  //         const refreshToken = localStorage.getItem('refreshToken');\n\n  //         // Attempt to logout with the backend\n  //         try {\n  //             await axios.post('http://localhost:8000/api/auth/logout/', \n  //                 { refresh_token: refreshToken },\n  //                 {\n  //                     headers: {\n  //                         'Authorization': `Bearer ${token}`,\n  //                         'Content-Type': 'application/json'\n  //                     }\n  //                 }\n  //             );\n  //         } catch (error) {\n  //             // If the error is due to expired access token, try without it\n  //             if (error.response?.data?.code === 'token_not_valid') {\n  //                 await axios.post('http://localhost:8000/api/auth/logout/', \n  //                     { refresh_token: refreshToken },\n  //                     {\n  //                         headers: {\n  //                             'Content-Type': 'application/json'\n  //                         }\n  //                     }\n  //                 );\n  //             } else {\n  //                 console.error('Logout error:', error);\n  //             }\n  //         }\n\n  //         // Clear local storage and state regardless of backend response\n  //         localStorage.removeItem('token');\n  //         localStorage.removeItem('refreshToken');\n  //         setToken(null);\n  //         setUser(null);\n  //         navigate('/login');\n  //     } catch (error) {\n  //         console.error('Logout error:', error);\n  //         console.log('Logout error:', error);\n  //         // Ensure we always clear local storage and state\n  //         // localStorage.removeItem('token');\n  //         // localStorage.removeItem('refreshToken');\n  //         // setToken(null);\n  //         // setUser(null);\n  //         // navigate('/login');\n  //     }\n  // };\n\n  const register = async formData => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/register/\", formData);\n      console.log(\"Registration response:\", response);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response;\n      console.log(\"Registration error:\", error);\n      console.error(\"Registration error:\", error);\n      return {\n        success: false,\n        error: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data\n      };\n    }\n  };\n  const verifyEmail = async (email, code) => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/verify-email/\", {\n        email,\n        code\n      });\n      console.log(\"Email verification response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      console.log(\"Email verification error:\", error);\n      return false;\n    }\n  };\n  const requestPasswordReset = async email => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\n        email\n      });\n      console.log(\"Password reset request response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      console.log(\"Password reset request error:\", error);\n      return false;\n    }\n  };\n  const resetPassword = async (uidb64, token, password, password2) => {\n    try {\n      const response = await axios.patch(\"http://127.0.0.1:8000/api/auth/password-reset-complete/\", {\n        uidb64,\n        token,\n        password,\n        password2\n      });\n      console.log(\"Password reset response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      console.log(\"Password reset error:\", error);\n      return false;\n    }\n  };\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        if (token) {\n          const decoded = jwtDecode(token);\n          setUser(decoded);\n\n          // Check if token is expired\n          const currentTime = Date.now() / 1000;\n          if (decoded.exp < currentTime) {\n            try {\n              const refreshToken = localStorage.getItem(\"refreshToken\");\n              const response = await axios.post(\"http://127.0.0.1:8000/api/token/refresh/\", {\n                refresh: refreshToken\n              });\n              const newAccessToken = response.data.access;\n              localStorage.setItem(\"token\", newAccessToken);\n              setToken(newAccessToken);\n              const newDecoded = jwtDecode(newAccessToken);\n              setUser(newDecoded);\n            } catch (refreshError) {\n              logout();\n            }\n          }\n        }\n      } catch (error) {\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isLoading,\n      login,\n      logout,\n      register,\n      verifyEmail,\n      requestPasswordReset,\n      resetPassword,\n      loginWithGoogle // Add the new Google login function\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"kylruUOWvOZDu62eJe4UZJ6Nx1s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","useNavigate","jwtDecode","initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","jsxDEV","_jsxDEV","AuthContext","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","googleProvider","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isLoading","setIsLoading","navigate","register","formData","response","post","console","log","success","data","error","_error$response","verifyEmail","email","code","requestPasswordReset","resetPassword","uidb64","password","password2","patch","checkAuth","decoded","currentTime","Date","now","exp","refreshToken","refresh","newAccessToken","access","setItem","newDecoded","refreshError","logout","Provider","value","login","loginWithGoogle","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/ahmed/Desktop/CP/djr_auth_deep/auth-client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode'; \r\n// Import Firebase\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\r\n\r\n\r\nconst AuthContext = createContext();\r\n\r\n\r\n// Your Firebase configuration - Replace with your own config\r\nconst firebaseConfig = {\r\n  apiKey: \"YOUR_API_KEY\",\r\n  authDomain: \"YOUR_AUTH_DOMAIN\",\r\n  projectId: \"YOUR_PROJECT_ID\",\r\n  storageBucket: \"YOUR_STORAGE_BUCKET\",\r\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\r\n  appId: \"YOUR_APP_ID\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n//   const login = async (email, password) => {\r\n//     try {\r\n//         const response = await axios.post(\r\n//             \"http://127.0.0.1:8000/api/auth/login/\",\r\n//             { email, password }\r\n//         );\r\n\r\n//         const { access, refresh } = response.data;\r\n        \r\n//         // Verify the user is verified before storing tokens\r\n//         const decoded = jwtDecode(access);\r\n//         if (!decoded.is_verified) {\r\n//             throw new Error(\"Email not verified. Please verify your email first.\");\r\n//         }\r\n\r\n//         localStorage.setItem(\"token\", access);\r\n//         localStorage.setItem(\"refreshToken\", refresh);\r\n//         setToken(access);\r\n//         setUser(decoded);\r\n//         console.log(\"Login response:\", response);\r\n//         return { success: true };\r\n//     } catch (error) {\r\n//         console.error(\"Login error:\", error);\r\n//         console.log(\"Login error:\", error);\r\n        \r\n//         // Clear any partial authentication if verification failed\r\n//         if (error.message.includes(\"verified\")) {\r\n//             localStorage.removeItem(\"token\");\r\n//             localStorage.removeItem(\"refreshToken\");\r\n//             setToken(null);\r\n//             setUser(null);\r\n//         }\r\n        \r\n//         return { \r\n//             success: false, \r\n//             error: error.response?.data?.detail || \r\n//                   error.message || \r\n//                   \"Login failed. Please try again.\" \r\n//         };\r\n//     }\r\n// };\r\n\r\n\r\n//   const logout = async () => {\r\n//     try {\r\n//         const refreshToken = localStorage.getItem('refreshToken');\r\n        \r\n//         // Attempt to logout with the backend\r\n//         try {\r\n//             await axios.post('http://localhost:8000/api/auth/logout/', \r\n//                 { refresh_token: refreshToken },\r\n//                 {\r\n//                     headers: {\r\n//                         'Authorization': `Bearer ${token}`,\r\n//                         'Content-Type': 'application/json'\r\n//                     }\r\n//                 }\r\n//             );\r\n//         } catch (error) {\r\n//             // If the error is due to expired access token, try without it\r\n//             if (error.response?.data?.code === 'token_not_valid') {\r\n//                 await axios.post('http://localhost:8000/api/auth/logout/', \r\n//                     { refresh_token: refreshToken },\r\n//                     {\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json'\r\n//                         }\r\n//                     }\r\n//                 );\r\n//             } else {\r\n//                 console.error('Logout error:', error);\r\n//             }\r\n//         }\r\n        \r\n//         // Clear local storage and state regardless of backend response\r\n//         localStorage.removeItem('token');\r\n//         localStorage.removeItem('refreshToken');\r\n//         setToken(null);\r\n//         setUser(null);\r\n//         navigate('/login');\r\n//     } catch (error) {\r\n//         console.error('Logout error:', error);\r\n//         console.log('Logout error:', error);\r\n//         // Ensure we always clear local storage and state\r\n//         // localStorage.removeItem('token');\r\n//         // localStorage.removeItem('refreshToken');\r\n//         // setToken(null);\r\n//         // setUser(null);\r\n//         // navigate('/login');\r\n//     }\r\n// };\r\n\r\n  const register = async (formData) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8000/api/auth/register/\",\r\n        formData\r\n      );\r\n      console.log(\"Registration response:\", response);\r\n      return { success: true, data: response.data, };\r\n    } catch (error) {\r\n      console.log(\"Registration error:\", error);\r\n      console.error(\"Registration error:\", error);\r\n      return { success: false, error: error.response?.data };\r\n    }\r\n  };\r\n\r\n  const verifyEmail = async (email, code) => {\r\n      try {\r\n          const response = await axios.post(\r\n              \"http://127.0.0.1:8000/api/auth/verify-email/\",\r\n              { email, code }\r\n          );\r\n          console.log(\"Email verification response:\", response);\r\n          return true;\r\n      } catch (error) {\r\n          console.error(\"Email verification error:\", error);\r\n          console.log(\"Email verification error:\", error);\r\n          return false;\r\n      }\r\n  };\r\n\r\n  const requestPasswordReset = async (email) => {\r\n    try {\r\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\r\n        email,\r\n      });\r\n      console.log(\"Password reset request response:\", response);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Password reset request error:\", error);\r\n      console.log(\"Password reset request error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (uidb64, token, password, password2) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        \"http://127.0.0.1:8000/api/auth/password-reset-complete/\",\r\n        {\r\n          uidb64,\r\n          token,\r\n          password,\r\n          password2,\r\n        }\r\n      );\r\n      console.log(\"Password reset response:\", response);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Password reset error:\", error);\r\n      console.log(\"Password reset error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        if (token) {\r\n          const decoded = jwtDecode(token);\r\n          setUser(decoded);\r\n\r\n          // Check if token is expired\r\n          const currentTime = Date.now() / 1000;\r\n          if (decoded.exp < currentTime) {\r\n            try {\r\n              const refreshToken = localStorage.getItem(\"refreshToken\");\r\n              const response = await axios.post(\r\n                \"http://127.0.0.1:8000/api/token/refresh/\",\r\n                {\r\n                  refresh: refreshToken,\r\n                }\r\n              );\r\n\r\n              const newAccessToken = response.data.access;\r\n              localStorage.setItem(\"token\", newAccessToken);\r\n              setToken(newAccessToken);\r\n\r\n              const newDecoded = jwtDecode(newAccessToken);\r\n              setUser(newDecoded);\r\n            } catch (refreshError) {\r\n              logout();\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        logout();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        isLoading,\r\n        login,\r\n        logout,\r\n        register,\r\n        verifyEmail,\r\n        requestPasswordReset,\r\n        resetPassword,\r\n        loginWithGoogle, // Add the new Google login function\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,YAAY;AACtC;AACA,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG7E,MAAMC,WAAW,gBAAGb,aAAa,CAAC,CAAC;;AAGnC;AACA,MAAMc,cAAc,GAAG;EACrBC,MAAM,EAAE,cAAc;EACtBC,UAAU,EAAE,kBAAkB;EAC9BC,SAAS,EAAE,iBAAiB;EAC5BC,aAAa,EAAE,qBAAqB;EACpCC,iBAAiB,EAAE,0BAA0B;EAC7CC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGd,aAAa,CAACO,cAAc,CAAC;AACzC,MAAMQ,IAAI,GAAGd,OAAO,CAACa,GAAG,CAAC;AACzB,MAAME,cAAc,GAAG,IAAId,kBAAkB,CAAC,CAAC;AAE/C,OAAO,MAAMe,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC6B,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMiC,QAAQ,GAAG9B,WAAW,CAAC,CAAC;;EAEhC;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,MAAM+B,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,IAAI,CAC/B,0CAA0C,EAC1CF,QACF,CAAC;MACDG,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,QAAQ,CAAC;MAC/C,OAAO;QAAEI,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAEL,QAAQ,CAACK;MAAM,CAAC;IAChD,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACdL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEG,KAAK,CAAC;MACzCJ,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEE,KAAK,GAAAC,eAAA,GAAED,KAAK,CAACN,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBF;MAAK,CAAC;IACxD;EACF,CAAC;EAED,MAAMG,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,KAAK;IACvC,IAAI;MACA,MAAMV,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,IAAI,CAC7B,8CAA8C,EAC9C;QAAEQ,KAAK;QAAEC;MAAK,CAClB,CAAC;MACDR,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,QAAQ,CAAC;MACrD,OAAO,IAAI;IACf,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEG,KAAK,CAAC;MAC/C,OAAO,KAAK;IAChB;EACJ,CAAC;EAED,MAAMK,oBAAoB,GAAG,MAAOF,KAAK,IAAK;IAC5C,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,IAAI,CAAC,qDAAqD,EAAE;QACvFQ;MACF,CAAC,CAAC;MACFP,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEH,QAAQ,CAAC;MACzD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEG,KAAK,CAAC;MACnD,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMM,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEtB,KAAK,EAAEuB,QAAQ,EAAEC,SAAS,KAAK;IAClE,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMlC,KAAK,CAACkD,KAAK,CAChC,yDAAyD,EACzD;QACEH,MAAM;QACNtB,KAAK;QACLuB,QAAQ;QACRC;MACF,CACF,CAAC;MACDb,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,QAAQ,CAAC;MACjD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,KAAK,CAAC;MAC3C,OAAO,KAAK;IACd;EACF,CAAC;EAEDzC,SAAS,CAAC,MAAM;IACd,MAAMoD,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,IAAI1B,KAAK,EAAE;UACT,MAAM2B,OAAO,GAAGlD,SAAS,CAACuB,KAAK,CAAC;UAChCD,OAAO,CAAC4B,OAAO,CAAC;;UAEhB;UACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;UACrC,IAAIH,OAAO,CAACI,GAAG,GAAGH,WAAW,EAAE;YAC7B,IAAI;cACF,MAAMI,YAAY,GAAG9B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;cACzD,MAAMM,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,IAAI,CAC/B,0CAA0C,EAC1C;gBACEuB,OAAO,EAAED;cACX,CACF,CAAC;cAED,MAAME,cAAc,GAAGzB,QAAQ,CAACK,IAAI,CAACqB,MAAM;cAC3CjC,YAAY,CAACkC,OAAO,CAAC,OAAO,EAAEF,cAAc,CAAC;cAC7CjC,QAAQ,CAACiC,cAAc,CAAC;cAExB,MAAMG,UAAU,GAAG5D,SAAS,CAACyD,cAAc,CAAC;cAC5CnC,OAAO,CAACsC,UAAU,CAAC;YACrB,CAAC,CAAC,OAAOC,YAAY,EAAE;cACrBC,MAAM,CAAC,CAAC;YACV;UACF;QACF;MACF,CAAC,CAAC,OAAOxB,KAAK,EAAE;QACdwB,MAAM,CAAC,CAAC;MACV,CAAC,SAAS;QACRlC,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDqB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAAC1B,KAAK,CAAC,CAAC;EAEX,oBACEjB,OAAA,CAACC,WAAW,CAACwD,QAAQ;IACnBC,KAAK,EAAE;MACL3C,IAAI;MACJE,KAAK;MACLI,SAAS;MACTsC,KAAK;MACLH,MAAM;MACNhC,QAAQ;MACRU,WAAW;MACXG,oBAAoB;MACpBC,aAAa;MACbsB,eAAe,CAAE;IACnB,CAAE;IAAA/C,QAAA,EAEDA;EAAQ;IAAAgD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClD,EAAA,CA5NWF,YAAY;EAAA,QAINnB,WAAW;AAAA;AAAAwE,EAAA,GAJjBrD,YAAY;AA8NzB,OAAO,MAAMsD,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM9E,UAAU,CAACY,WAAW,CAAC;AAAA;AAACkE,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}