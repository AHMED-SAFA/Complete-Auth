{"ast":null,"code":"// /* eslint-disable react-hooks/exhaustive-deps */\n// import { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import { jwtDecode } from 'jwt-decode'; \n// import { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\n// import {auth, googleProvider} from \"../firebase\"\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [token, setToken] = useState(localStorage.getItem(\"token\"));\n//   const [isLoading, setIsLoading] = useState(true);\n//   const navigate = useNavigate();\n\n// const login = async (email, password) => {\n//       try {\n//         const response = await axios.post(\n//             \"http://127.0.0.1:8000/api/auth/login/\",\n//             { email, password }\n//         );\n\n//         const { access, refresh } = response.data;\n\n//         // Verify the user is verified before storing tokens\n//         const decoded = jwtDecode(access);\n//         if (!decoded.is_verified) {\n//             throw new Error(\"Email not verified. Please verify your email first.\");\n//         }\n\n//         localStorage.setItem(\"token\", access);\n//         localStorage.setItem(\"refreshToken\", refresh);\n//         setToken(access);\n//         setUser(decoded);\n//         console.log(\"Login response:\", response);\n//         return { success: true };\n//     } catch (error) {\n//         console.error(\"Login error:\", error);\n//         console.log(\"Login error:\", error);\n\n//         // Clear any partial authentication if verification failed\n//         if (error.message.includes(\"verified\")) {\n//             localStorage.removeItem(\"token\");\n//             localStorage.removeItem(\"refreshToken\");\n//             setToken(null);\n//             setUser(null);\n//         }\n\n//         return { \n//             success: false, \n//             error: error.response?.data?.detail || \n//                   error.message || \n//                   \"Login failed. Please try again.\" \n//         };\n//     }\n// };\n\n// const loginWithGoogle = async () => {\n//     try {\n\n//       // Configure popup settings to handle COOP issues\n//       const auth = getAuth();\n//       const provider = new GoogleAuthProvider();\n//       // Add these settings\n//       auth.settings.appVerificationDisabledForTesting = true;\n\n//       // Sign in with Google popup\n//       const result = await signInWithPopup(auth, googleProvider);\n\n//       // Get the Firebase ID token\n//       const idToken = await result.user.getIdToken();\n\n//       // Send the token to your backend\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/firebase-login/\",\n//         { idToken }\n//       );\n\n//       const { access, refresh } = response.data;\n\n//       localStorage.setItem(\"token\", access);\n//       localStorage.setItem(\"refreshToken\", refresh);\n//       setToken(access);\n//       setUser(response.data.user);\n\n//       console.log(\"Google login response.data:\", response.data);\n//       console.log(\"Google login response.data.user:\", response.data.user);\n//       console.log(\"Google login Result is\", result);\n//       console.log(\"idToken is\", idToken);\n//       console.log(\"google auth provider\", provider);\n//       return { success: true };\n//     } catch (error) {\n//       console.error(\"Google login error:\", error);\n//       return { \n//         success: false, \n//         error: error.response?.data?.error || \n//               error.message || \n//               \"Google login failed. Please try again.\" \n//       };\n//     }\n// };\n\n// const logout = async () => {\n//     try {\n//         const refreshToken = localStorage.getItem('refreshToken');\n\n//         // Attempt to logout with the backend\n//         try {\n//             await axios.post('http://localhost:8000/api/auth/logout/', \n//                 { refresh_token: refreshToken },\n//                 {\n//                     headers: {\n//                         'Authorization': `Bearer ${token}`,\n//                         'Content-Type': 'application/json'\n//                     }\n//                 }\n//             );\n//         } catch (error) {\n//             // If the error is due to expired access token, try without it\n//             if (error.response?.data?.code === 'token_not_valid') {\n//                 await axios.post('http://localhost:8000/api/auth/logout/', \n//                     { refresh_token: refreshToken },\n//                     {\n//                         headers: {\n//                             'Content-Type': 'application/json'\n//                         }\n//                     }\n//                 );\n//             } else {\n//                 console.error('Logout error:', error);\n//             }\n//         }\n\n//         // Sign out from Firebase if needed\n//         try {\n//           await auth.signOut();\n//         } catch (fbError) {\n//           console.error('Firebase logout error:', fbError);\n//         }\n\n//         // Clear local storage and state regardless of backend response\n//         localStorage.removeItem('token');\n//         localStorage.removeItem('refreshToken');\n//         setToken(null);\n//         setUser(null);\n//         navigate('/login');\n//     } catch (error) {\n//         console.error('Logout error:', error);\n\n//         // Ensure we always clear local storage and state\n//         localStorage.removeItem('token');\n//         localStorage.removeItem('refreshToken');\n//         setToken(null);\n//         setUser(null);\n//         navigate('/login');\n//     }\n// };\n\n//   const register = async (formData) => {\n//     try {\n//       const response = await axios.post(\n//         \"http://127.0.0.1:8000/api/auth/register/\",\n//         formData\n//       );\n//       console.log(\"Registration response:\", response);\n//       return { success: true, data: response.data, };\n//     } catch (error) {\n//       console.log(\"Registration error:\", error);\n//       console.error(\"Registration error:\", error);\n//       return { success: false, error: error.response?.data };\n//     }\n//   };\n\n//   const verifyEmail = async (email, code) => {\n//       try {\n//           const response = await axios.post(\n//               \"http://127.0.0.1:8000/api/auth/verify-email/\",\n//               { email, code }\n//           );\n//           console.log(\"Email verification response:\", response);\n//           return true;\n//       } catch (error) {\n//           console.error(\"Email verification error:\", error);\n//           console.log(\"Email verification error:\", error);\n//           return false;\n//       }\n//   };\n\n//   const requestPasswordReset = async (email) => {\n//     try {\n//       const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\n//         email,\n//       });\n//       console.log(\"Password reset request response:\", response);\n//       return true;\n//     } catch (error) {\n//       console.error(\"Password reset request error:\", error);\n//       console.log(\"Password reset request error:\", error);\n//       return false;\n//     }\n//   };\n\n//   const resetPassword = async (uidb64, token, password, password2) => {\n//     try {\n//       const response = await axios.patch(\n//         \"http://127.0.0.1:8000/api/auth/password-reset-complete/\",\n//         {\n//           uidb64,\n//           token,\n//           password,\n//           password2,\n//         }\n//       );\n//       console.log(\"Password reset response:\", response);\n//       return true;\n//     } catch (error) {\n//       console.error(\"Password reset error:\", error);\n//       console.log(\"Password reset error:\", error);\n//       return false;\n//     }\n//   };\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         if (token) {\n//           const decoded = jwtDecode(token);\n//           setUser(decoded);\n\n//           // Check if token is expired\n//           const currentTime = Date.now() / 1000;\n//           if (decoded.exp < currentTime) {\n//             try {\n//               const refreshToken = localStorage.getItem(\"refreshToken\");\n//               const response = await axios.post(\n//                 \"http://127.0.0.1:8000/api/token/refresh/\",\n//                 {\n//                   refresh: refreshToken,\n//                 }\n//               );\n\n//               const newAccessToken = response.data.access;\n//               localStorage.setItem(\"token\", newAccessToken);\n//               setToken(newAccessToken);\n\n//               const newDecoded = jwtDecode(newAccessToken);\n//               setUser(newDecoded);\n//             } catch (refreshError) {\n//               logout();\n//             }\n//           }\n//         }\n//       } catch (error) {\n//         logout();\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     checkAuth();\n//   }, [token]);\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         token,\n//         isLoading,\n//         login,\n//         logout,\n//         register,\n//         verifyEmail,\n//         requestPasswordReset,\n//         resetPassword,\n//         loginWithGoogle, \n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => useContext(AuthContext);","map":{"version":3,"names":[],"sources":["C:/Users/ahmed/Desktop/CP/New folder/auth-client/src/context/AuthContext.js"],"sourcesContent":["// /* eslint-disable react-hooks/exhaustive-deps */\r\n// import { createContext, useContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { jwtDecode } from 'jwt-decode'; \r\n// import { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\r\n// import {auth, googleProvider} from \"../firebase\"\r\n\r\n\r\n// const AuthContext = createContext();\r\n\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n//   const navigate = useNavigate();\r\n\r\n\r\n// const login = async (email, password) => {\r\n//       try {\r\n//         const response = await axios.post(\r\n//             \"http://127.0.0.1:8000/api/auth/login/\",\r\n//             { email, password }\r\n//         );\r\n\r\n//         const { access, refresh } = response.data;\r\n        \r\n//         // Verify the user is verified before storing tokens\r\n//         const decoded = jwtDecode(access);\r\n//         if (!decoded.is_verified) {\r\n//             throw new Error(\"Email not verified. Please verify your email first.\");\r\n//         }\r\n\r\n//         localStorage.setItem(\"token\", access);\r\n//         localStorage.setItem(\"refreshToken\", refresh);\r\n//         setToken(access);\r\n//         setUser(decoded);\r\n//         console.log(\"Login response:\", response);\r\n//         return { success: true };\r\n//     } catch (error) {\r\n//         console.error(\"Login error:\", error);\r\n//         console.log(\"Login error:\", error);\r\n        \r\n//         // Clear any partial authentication if verification failed\r\n//         if (error.message.includes(\"verified\")) {\r\n//             localStorage.removeItem(\"token\");\r\n//             localStorage.removeItem(\"refreshToken\");\r\n//             setToken(null);\r\n//             setUser(null);\r\n//         }\r\n        \r\n//         return { \r\n//             success: false, \r\n//             error: error.response?.data?.detail || \r\n//                   error.message || \r\n//                   \"Login failed. Please try again.\" \r\n//         };\r\n//     }\r\n// };\r\n\r\n// const loginWithGoogle = async () => {\r\n//     try {\r\n\r\n//       // Configure popup settings to handle COOP issues\r\n//       const auth = getAuth();\r\n//       const provider = new GoogleAuthProvider();\r\n//       // Add these settings\r\n//       auth.settings.appVerificationDisabledForTesting = true;\r\n\r\n//       // Sign in with Google popup\r\n//       const result = await signInWithPopup(auth, googleProvider);\r\n      \r\n//       // Get the Firebase ID token\r\n//       const idToken = await result.user.getIdToken();\r\n      \r\n//       // Send the token to your backend\r\n//       const response = await axios.post(\r\n//         \"http://127.0.0.1:8000/api/auth/firebase-login/\",\r\n//         { idToken }\r\n//       );\r\n      \r\n//       const { access, refresh } = response.data;\r\n      \r\n//       localStorage.setItem(\"token\", access);\r\n//       localStorage.setItem(\"refreshToken\", refresh);\r\n//       setToken(access);\r\n//       setUser(response.data.user);\r\n      \r\n//       console.log(\"Google login response.data:\", response.data);\r\n//       console.log(\"Google login response.data.user:\", response.data.user);\r\n//       console.log(\"Google login Result is\", result);\r\n//       console.log(\"idToken is\", idToken);\r\n//       console.log(\"google auth provider\", provider);\r\n//       return { success: true };\r\n//     } catch (error) {\r\n//       console.error(\"Google login error:\", error);\r\n//       return { \r\n//         success: false, \r\n//         error: error.response?.data?.error || \r\n//               error.message || \r\n//               \"Google login failed. Please try again.\" \r\n//       };\r\n//     }\r\n// };\r\n\r\n// const logout = async () => {\r\n//     try {\r\n//         const refreshToken = localStorage.getItem('refreshToken');\r\n        \r\n//         // Attempt to logout with the backend\r\n//         try {\r\n//             await axios.post('http://localhost:8000/api/auth/logout/', \r\n//                 { refresh_token: refreshToken },\r\n//                 {\r\n//                     headers: {\r\n//                         'Authorization': `Bearer ${token}`,\r\n//                         'Content-Type': 'application/json'\r\n//                     }\r\n//                 }\r\n//             );\r\n//         } catch (error) {\r\n//             // If the error is due to expired access token, try without it\r\n//             if (error.response?.data?.code === 'token_not_valid') {\r\n//                 await axios.post('http://localhost:8000/api/auth/logout/', \r\n//                     { refresh_token: refreshToken },\r\n//                     {\r\n//                         headers: {\r\n//                             'Content-Type': 'application/json'\r\n//                         }\r\n//                     }\r\n//                 );\r\n//             } else {\r\n//                 console.error('Logout error:', error);\r\n//             }\r\n//         }\r\n        \r\n//         // Sign out from Firebase if needed\r\n//         try {\r\n//           await auth.signOut();\r\n//         } catch (fbError) {\r\n//           console.error('Firebase logout error:', fbError);\r\n//         }\r\n        \r\n//         // Clear local storage and state regardless of backend response\r\n//         localStorage.removeItem('token');\r\n//         localStorage.removeItem('refreshToken');\r\n//         setToken(null);\r\n//         setUser(null);\r\n//         navigate('/login');\r\n//     } catch (error) {\r\n//         console.error('Logout error:', error);\r\n        \r\n//         // Ensure we always clear local storage and state\r\n//         localStorage.removeItem('token');\r\n//         localStorage.removeItem('refreshToken');\r\n//         setToken(null);\r\n//         setUser(null);\r\n//         navigate('/login');\r\n//     }\r\n// };\r\n\r\n//   const register = async (formData) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://127.0.0.1:8000/api/auth/register/\",\r\n//         formData\r\n//       );\r\n//       console.log(\"Registration response:\", response);\r\n//       return { success: true, data: response.data, };\r\n//     } catch (error) {\r\n//       console.log(\"Registration error:\", error);\r\n//       console.error(\"Registration error:\", error);\r\n//       return { success: false, error: error.response?.data };\r\n//     }\r\n//   };\r\n\r\n//   const verifyEmail = async (email, code) => {\r\n//       try {\r\n//           const response = await axios.post(\r\n//               \"http://127.0.0.1:8000/api/auth/verify-email/\",\r\n//               { email, code }\r\n//           );\r\n//           console.log(\"Email verification response:\", response);\r\n//           return true;\r\n//       } catch (error) {\r\n//           console.error(\"Email verification error:\", error);\r\n//           console.log(\"Email verification error:\", error);\r\n//           return false;\r\n//       }\r\n//   };\r\n\r\n//   const requestPasswordReset = async (email) => {\r\n//     try {\r\n//       const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\r\n//         email,\r\n//       });\r\n//       console.log(\"Password reset request response:\", response);\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Password reset request error:\", error);\r\n//       console.log(\"Password reset request error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const resetPassword = async (uidb64, token, password, password2) => {\r\n//     try {\r\n//       const response = await axios.patch(\r\n//         \"http://127.0.0.1:8000/api/auth/password-reset-complete/\",\r\n//         {\r\n//           uidb64,\r\n//           token,\r\n//           password,\r\n//           password2,\r\n//         }\r\n//       );\r\n//       console.log(\"Password reset response:\", response);\r\n//       return true;\r\n//     } catch (error) {\r\n//       console.error(\"Password reset error:\", error);\r\n//       console.log(\"Password reset error:\", error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         if (token) {\r\n//           const decoded = jwtDecode(token);\r\n//           setUser(decoded);\r\n\r\n//           // Check if token is expired\r\n//           const currentTime = Date.now() / 1000;\r\n//           if (decoded.exp < currentTime) {\r\n//             try {\r\n//               const refreshToken = localStorage.getItem(\"refreshToken\");\r\n//               const response = await axios.post(\r\n//                 \"http://127.0.0.1:8000/api/token/refresh/\",\r\n//                 {\r\n//                   refresh: refreshToken,\r\n//                 }\r\n//               );\r\n\r\n//               const newAccessToken = response.data.access;\r\n//               localStorage.setItem(\"token\", newAccessToken);\r\n//               setToken(newAccessToken);\r\n\r\n//               const newDecoded = jwtDecode(newAccessToken);\r\n//               setUser(newDecoded);\r\n//             } catch (refreshError) {\r\n//               logout();\r\n//             }\r\n//           }\r\n//         }\r\n//       } catch (error) {\r\n//         logout();\r\n//       } finally {\r\n//         setIsLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     checkAuth();\r\n//   }, [token]);\r\n\r\n//   return (\r\n//     <AuthContext.Provider\r\n//       value={{\r\n//         user,\r\n//         token,\r\n//         isLoading,\r\n//         login,\r\n//         logout,\r\n//         register,\r\n//         verifyEmail,\r\n//         requestPasswordReset,\r\n//         resetPassword,\r\n//         loginWithGoogle, \r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}