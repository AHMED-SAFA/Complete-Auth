{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\CP\\\\djr_auth_deep\\\\auth-client\\\\src\\\\pages\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { useAuth } from \"../context/AuthContext\";\n// import { TextField, Button, Container, Typography, Box, Alert, CircularProgress } from \"@mui/material\";\n\n// const ResetPassword = () => {\n//   const { uidb64, token } = useParams();\n//   const [password, setPassword] = useState(\"\");\n//   const [password2, setPassword2] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [tokenValid, setTokenValid] = useState(null);\n//   const { resetPassword } = useAuth();\n//   const navigate = useNavigate();\n\n//   // Check token validity when component mounts\n//   useEffect(() => {\n//     const checkToken = async () => {\n//       try {\n//         setLoading(true);\n//         setTokenValid(true);\n//       } catch (err) {\n//         setError(\"The reset link is invalid or has expired.\");\n//         setTokenValid(false);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     checkToken();\n//   }, [uidb64, token]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\");\n//     setMessage(\"\");\n\n//     if (password !== password2) {\n//       setError(\"Passwords do not match\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     const success = await resetPassword(uidb64, token, password, password2);\n//     setLoading(false);\n\n//     if (success) {\n//       setMessage(\"Password reset successfully. You can now login with your new password.\");\n//       console.log(\"Password reset successful\", success);\n//       setTimeout(() => navigate(\"/login\"), 3000);\n//     } else {\n//       setError(\"Password reset failed. The link may be invalid or expired.\");\n//       console.log(\"Password reset failed. The link may be invalid or expired.\");\n//     }\n//   };\n\n//   if (loading && tokenValid === null) {\n//     return (\n//       <Container maxWidth=\"xs\">\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <CircularProgress />\n//           <Typography variant=\"body1\" sx={{ mt: 2 }}>\n//             Verifying reset link...\n//           </Typography>\n//         </Box>\n//       </Container>\n//     );\n//   }\n\n//   if (tokenValid === false) {\n//     return (\n//       <Container maxWidth=\"xs\">\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\n//             {error || \"The password reset link is invalid or has expired.\"}\n//           </Alert>\n//           <Button variant=\"contained\" onClick={() => navigate('/forgot-password')}>\n//             Request New Reset Link\n//           </Button>\n//         </Box>\n//       </Container>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"xs\">\n//       <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//         <Typography component=\"h1\" variant=\"h5\">\n//           Reset Password\n//         </Typography>\n//         {message && (\n//           <Alert severity=\"success\" sx={{ width: '100%', mt: 2 }}>\n//             {message}\n//           </Alert>\n//         )}\n//         {error && (\n//           <Alert severity=\"error\" sx={{ width: '100%', mt: 2 }}>\n//             {error}\n//           </Alert>\n//         )}\n//         <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\n//           <TextField\n//             margin=\"normal\"\n//             required\n//             fullWidth\n//             name=\"password\"\n//             label=\"New Password\"\n//             type=\"password\"\n//             id=\"password\"\n//             autoComplete=\"new-password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//           />\n//           <TextField\n//             margin=\"normal\"\n//             required\n//             fullWidth\n//             name=\"password2\"\n//             label=\"Confirm New Password\"\n//             type=\"password\"\n//             id=\"password2\"\n//             autoComplete=\"new-password\"\n//             value={password2}\n//             onChange={(e) => setPassword2(e.target.value)}\n//           />\n//           <Button\n//             type=\"submit\"\n//             fullWidth\n//             variant=\"contained\"\n//             sx={{ mt: 3, mb: 2 }}\n//             disabled={loading}\n//           >\n//             {loading ? <CircularProgress size={24} /> : \"Reset Password\"}\n//           </Button>\n//         </Box>\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default ResetPassword;\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { TextField, Button, Container, Typography, Box, Alert, CircularProgress } from \"@mui/material\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const {\n    uidb64,\n    token\n  } = useParams();\n  const [password, setPassword] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [tokenValid, setTokenValid] = useState(null);\n  const navigate = useNavigate();\n\n  // Check token validity when component mounts\n  useEffect(() => {\n    const checkToken = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(`http://localhost:8000/api/auth/password-reset/${uidb64}/${token}/`);\n        setTokenValid(true);\n        console.log(\"Password reset response from check token:\", response);\n      } catch (err) {\n        console.log;\n        setError(\"The reset link is invalid or has expired (links are valid for 10 minutes).\");\n        setTokenValid(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkToken();\n  }, [uidb64, token]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\");\n    setMessage(\"\");\n    if (password !== password2) {\n      setError(\"Passwords do not match\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.patch(\"http://localhost:8000/api/auth/password-reset-complete/\", {\n        uidb64,\n        token,\n        password,\n        password2\n      });\n      setMessage(\"Password reset successfully. You can now login with your new password.\");\n      console.log(\"Password reset response:\", response);\n      setTimeout(() => navigate(\"/login\"), 3000);\n    } catch (err) {\n      console.error(\"Password reset error:\", err);\n      setError(\"Password reset failed. The link may be invalid or expired.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading && tokenValid === null) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            mt: 2\n          },\n          children: \"Verifying reset link...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this);\n  }\n  if (tokenValid === false) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          sx: {\n            width: '100%',\n            mb: 2\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: () => navigate('/forgot-password'),\n          sx: {\n            mt: 2\n          },\n          children: \"Request New Reset Link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xs\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h5\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mt: 1\n        },\n        children: \"(Link expires in 10 minutes)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          width: '100%',\n          mt: 2\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          width: '100%',\n          mt: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          name: \"password\",\n          label: \"New Password\",\n          type: \"password\",\n          id: \"password\",\n          autoComplete: \"new-password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          required: true,\n          fullWidth: true,\n          name: \"password2\",\n          label: \"Confirm New Password\",\n          type: \"password\",\n          id: \"password2\",\n          autoComplete: \"new-password\",\n          value: password2,\n          onChange: e => setPassword2(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\",\n          sx: {\n            mt: 3,\n            mb: 2\n          },\n          disabled: loading,\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 24\n          }, this) : \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"mY4xlTK8M+7E9X1glgdUnpSq+38=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["useState","useEffect","useNavigate","useParams","useAuth","TextField","Button","Container","Typography","Box","Alert","CircularProgress","axios","jsxDEV","_jsxDEV","ResetPassword","_s","uidb64","token","password","setPassword","password2","setPassword2","message","setMessage","error","setError","loading","setLoading","tokenValid","setTokenValid","navigate","checkToken","response","get","console","log","err","handleSubmit","e","preventDefault","patch","setTimeout","maxWidth","children","sx","mt","display","flexDirection","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","variant","severity","width","mb","onClick","component","color","onSubmit","margin","required","fullWidth","name","label","type","id","autoComplete","value","onChange","target","disabled","size","_c","$RefreshReg$"],"sources":["C:/Users/ahmed/Desktop/CP/djr_auth_deep/auth-client/src/pages/ResetPassword.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import { useNavigate, useParams } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/AuthContext\";\r\n// import { TextField, Button, Container, Typography, Box, Alert, CircularProgress } from \"@mui/material\";\r\n\r\n// const ResetPassword = () => {\r\n//   const { uidb64, token } = useParams();\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [password2, setPassword2] = useState(\"\");\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [tokenValid, setTokenValid] = useState(null);\r\n//   const { resetPassword } = useAuth();\r\n//   const navigate = useNavigate();\r\n\r\n//   // Check token validity when component mounts\r\n//   useEffect(() => {\r\n//     const checkToken = async () => {\r\n//       try {\r\n//         setLoading(true);\r\n//         setTokenValid(true);\r\n//       } catch (err) {\r\n//         setError(\"The reset link is invalid or has expired.\");\r\n//         setTokenValid(false);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n    \r\n//     checkToken();\r\n//   }, [uidb64, token]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     setError(\"\");\r\n//     setMessage(\"\");\r\n\r\n//     if (password !== password2) {\r\n//       setError(\"Passwords do not match\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     const success = await resetPassword(uidb64, token, password, password2);\r\n//     setLoading(false);\r\n    \r\n//     if (success) {\r\n//       setMessage(\"Password reset successfully. You can now login with your new password.\");\r\n//       console.log(\"Password reset successful\", success);\r\n//       setTimeout(() => navigate(\"/login\"), 3000);\r\n//     } else {\r\n//       setError(\"Password reset failed. The link may be invalid or expired.\");\r\n//       console.log(\"Password reset failed. The link may be invalid or expired.\");\r\n//     }\r\n//   };\r\n\r\n//   if (loading && tokenValid === null) {\r\n//     return (\r\n//       <Container maxWidth=\"xs\">\r\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//           <CircularProgress />\r\n//           <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n//             Verifying reset link...\r\n//           </Typography>\r\n//         </Box>\r\n//       </Container>\r\n//     );\r\n//   }\r\n\r\n//   if (tokenValid === false) {\r\n//     return (\r\n//       <Container maxWidth=\"xs\">\r\n//         <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//           <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\r\n//             {error || \"The password reset link is invalid or has expired.\"}\r\n//           </Alert>\r\n//           <Button variant=\"contained\" onClick={() => navigate('/forgot-password')}>\r\n//             Request New Reset Link\r\n//           </Button>\r\n//         </Box>\r\n//       </Container>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <Container maxWidth=\"xs\">\r\n//       <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n//         <Typography component=\"h1\" variant=\"h5\">\r\n//           Reset Password\r\n//         </Typography>\r\n//         {message && (\r\n//           <Alert severity=\"success\" sx={{ width: '100%', mt: 2 }}>\r\n//             {message}\r\n//           </Alert>\r\n//         )}\r\n//         {error && (\r\n//           <Alert severity=\"error\" sx={{ width: '100%', mt: 2 }}>\r\n//             {error}\r\n//           </Alert>\r\n//         )}\r\n//         <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             name=\"password\"\r\n//             label=\"New Password\"\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             autoComplete=\"new-password\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             name=\"password2\"\r\n//             label=\"Confirm New Password\"\r\n//             type=\"password\"\r\n//             id=\"password2\"\r\n//             autoComplete=\"new-password\"\r\n//             value={password2}\r\n//             onChange={(e) => setPassword2(e.target.value)}\r\n//           />\r\n//           <Button\r\n//             type=\"submit\"\r\n//             fullWidth\r\n//             variant=\"contained\"\r\n//             sx={{ mt: 3, mb: 2 }}\r\n//             disabled={loading}\r\n//           >\r\n//             {loading ? <CircularProgress size={24} /> : \"Reset Password\"}\r\n//           </Button>\r\n//         </Box>\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default ResetPassword;\r\n\r\n\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport { TextField, Button, Container, Typography, Box, Alert, CircularProgress } from \"@mui/material\";\r\nimport axios from \"axios\";\r\n\r\nconst ResetPassword = () => {\r\n  const { uidb64, token } = useParams();\r\n  const [password, setPassword] = useState(\"\");\r\n  const [password2, setPassword2] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [tokenValid, setTokenValid] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Check token validity when component mounts\r\n  useEffect(() => {\r\n    const checkToken = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.get(\r\n          `http://localhost:8000/api/auth/password-reset/${uidb64}/${token}/`\r\n        );\r\n        setTokenValid(true);\r\n        console.log(\"Password reset response from check token:\", response);\r\n      } catch (err) {\r\n        console.log\r\n        setError(\"The reset link is invalid or has expired (links are valid for 10 minutes).\");\r\n        setTokenValid(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkToken();\r\n  }, [uidb64, token]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setMessage(\"\");\r\n\r\n    if (password !== password2) {\r\n      setError(\"Passwords do not match\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.patch(\r\n        \"http://localhost:8000/api/auth/password-reset-complete/\",\r\n        { uidb64, token, password, password2 }\r\n      );\r\n      setMessage(\"Password reset successfully. You can now login with your new password.\");\r\n      console.log(\"Password reset response:\", response);\r\n      setTimeout(() => navigate(\"/login\"), 3000);\r\n    } catch (err) {\r\n      console.error(\"Password reset error:\", err);\r\n      setError(\"Password reset failed. The link may be invalid or expired.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading && tokenValid === null) {\r\n    return (\r\n      <Container maxWidth=\"xs\">\r\n        <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n          <CircularProgress />\r\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n            Verifying reset link...\r\n          </Typography>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (tokenValid === false) {\r\n    return (\r\n      <Container maxWidth=\"xs\">\r\n        <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n          <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\r\n            {error}\r\n          </Alert>\r\n          <Button \r\n            variant=\"contained\" \r\n            onClick={() => navigate('/forgot-password')}\r\n            sx={{ mt: 2 }}\r\n          >\r\n            Request New Reset Link\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xs\">\r\n      <Box sx={{ mt: 8, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Reset Password\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\r\n          (Link expires in 10 minutes)\r\n        </Typography>\r\n        {message && (\r\n          <Alert severity=\"success\" sx={{ width: '100%', mt: 2 }}>\r\n            {message}\r\n          </Alert>\r\n        )}\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ width: '100%', mt: 2 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n        <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1 }}>\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"New Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"new-password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password2\"\r\n            label=\"Confirm New Password\"\r\n            type=\"password\"\r\n            id=\"password2\"\r\n            autoComplete=\"new-password\"\r\n            value={password2}\r\n            onChange={(e) => setPassword2(e.target.value)}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            sx={{ mt: 3, mb: 2 }}\r\n            disabled={loading}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : \"Reset Password\"}\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,GAAG,EAAEC,KAAK,EAAEC,gBAAgB,QAAQ,eAAe;AACtG,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGf,SAAS,CAAC,CAAC;EACrC,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}