{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\CP\\\\djr_auth_deep\\\\auth-client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // const login = async (email, password) => {\n  //   try {\n  //     const response = await axios.post(\n  //       \"http://127.0.0.1:8000/api/auth/login/\",\n  //       {\n  //         email,\n  //         password,\n  //       }\n  //     );\n\n  //     const { access, refresh } = response.data;\n  //     localStorage.setItem(\"token\", access);\n  //     localStorage.setItem(\"refreshToken\", refresh);\n  //     setToken(access);\n\n  //     const decoded = jwtDecode(access);\n  //     setUser(decoded);\n  //     console.log(\"Login response:\", response);\n\n  //     return { success: true };\n  //   } catch (error) {\n  //     console.error(\"Login error:\", error);\n  //     console.log(\"Login error:\", error);\n  //     return { success: false, error: error.response?.data };\n  //   }\n  // };\n\n  const logout = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n\n      // Attempt to logout with the backend\n      try {\n        await axios.post('http://localhost:8000/api/auth/logout/', {\n          refresh_token: refreshToken\n        }, {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n      } catch (error) {\n        var _error$response, _error$response$data;\n        // If the error is due to expired access token, try without it\n        if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.code) === 'token_not_valid') {\n          await axios.post('http://localhost:8000/api/auth/logout/', {\n            refresh_token: refreshToken\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n        } else {\n          console.error('Logout error:', error);\n        }\n      }\n\n      // Clear local storage and state regardless of backend response\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      setToken(null);\n      setUser(null);\n      navigate('/login');\n    } catch (error) {\n      console.error('Logout error:', error);\n      console.log('Logout error:', error);\n      // Ensure we always clear local storage and state\n      // localStorage.removeItem('token');\n      // localStorage.removeItem('refreshToken');\n      // setToken(null);\n      // setUser(null);\n      // navigate('/login');\n    }\n  };\n  const register = async formData => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/register/\", formData);\n      console.log(\"Registration response:\", response);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2;\n      console.log(\"Registration error:\", error);\n      console.error(\"Registration error:\", error);\n      return {\n        success: false,\n        error: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n      };\n    }\n  };\n  const verifyEmail = async (email, code) => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/verify-email/\", {\n        email,\n        code\n      });\n      console.log(\"Email verification response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      console.log(\"Email verification error:\", error);\n      return false;\n    }\n  };\n  const requestPasswordReset = async email => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\n        email\n      });\n      console.log(\"Password reset request response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Password reset request error:\", error);\n      console.log(\"Password reset request error:\", error);\n      return false;\n    }\n  };\n  const resetPassword = async (uidb64, token, password, password2) => {\n    try {\n      const response = await axios.patch(\"http://127.0.0.1:8000/api/auth/password-reset-complete/\", {\n        uidb64,\n        token,\n        password,\n        password2\n      });\n      console.log(\"Password reset response:\", response);\n      return true;\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      console.log(\"Password reset error:\", error);\n      return false;\n    }\n  };\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        if (token) {\n          const decoded = jwtDecode(token);\n          setUser(decoded);\n\n          // Check if token is expired\n          const currentTime = Date.now() / 1000;\n          if (decoded.exp < currentTime) {\n            try {\n              const refreshToken = localStorage.getItem(\"refreshToken\");\n              const response = await axios.post(\"http://127.0.0.1:8000/api/token/refresh/\", {\n                refresh: refreshToken\n              });\n              const newAccessToken = response.data.access;\n              localStorage.setItem(\"token\", newAccessToken);\n              setToken(newAccessToken);\n              const newDecoded = jwtDecode(newAccessToken);\n              setUser(newDecoded);\n            } catch (refreshError) {\n              logout();\n            }\n          }\n        }\n      } catch (error) {\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isLoading,\n      login,\n      logout,\n      register,\n      verifyEmail,\n      requestPasswordReset,\n      resetPassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"kylruUOWvOZDu62eJe4UZJ6Nx1s=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","useNavigate","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isLoading","setIsLoading","navigate","logout","refreshToken","post","refresh_token","headers","error","_error$response","_error$response$data","response","data","code","console","removeItem","log","register","formData","success","_error$response2","verifyEmail","email","requestPasswordReset","resetPassword","uidb64","password","password2","patch","checkAuth","decoded","currentTime","Date","now","exp","refresh","newAccessToken","access","setItem","newDecoded","refreshError","Provider","value","login","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/ahmed/Desktop/CP/djr_auth_deep/auth-client/src/context/AuthContext.js"],"sourcesContent":["\r\nimport { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode'; \r\n\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // const login = async (email, password) => {\r\n  //   try {\r\n  //     const response = await axios.post(\r\n  //       \"http://127.0.0.1:8000/api/auth/login/\",\r\n  //       {\r\n  //         email,\r\n  //         password,\r\n  //       }\r\n  //     );\r\n\r\n  //     const { access, refresh } = response.data;\r\n  //     localStorage.setItem(\"token\", access);\r\n  //     localStorage.setItem(\"refreshToken\", refresh);\r\n  //     setToken(access);\r\n\r\n  //     const decoded = jwtDecode(access);\r\n  //     setUser(decoded);\r\n  //     console.log(\"Login response:\", response);\r\n\r\n  //     return { success: true };\r\n  //   } catch (error) {\r\n  //     console.error(\"Login error:\", error);\r\n  //     console.log(\"Login error:\", error);\r\n  //     return { success: false, error: error.response?.data };\r\n  //   }\r\n  // };\r\n\r\n\r\n  \r\n\r\n\r\n  const logout = async () => {\r\n    try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        \r\n        // Attempt to logout with the backend\r\n        try {\r\n            await axios.post('http://localhost:8000/api/auth/logout/', \r\n                { refresh_token: refreshToken },\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n            );\r\n        } catch (error) {\r\n            // If the error is due to expired access token, try without it\r\n            if (error.response?.data?.code === 'token_not_valid') {\r\n                await axios.post('http://localhost:8000/api/auth/logout/', \r\n                    { refresh_token: refreshToken },\r\n                    {\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    }\r\n                );\r\n            } else {\r\n                console.error('Logout error:', error);\r\n            }\r\n        }\r\n        \r\n        // Clear local storage and state regardless of backend response\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refreshToken');\r\n        setToken(null);\r\n        setUser(null);\r\n        navigate('/login');\r\n    } catch (error) {\r\n        console.error('Logout error:', error);\r\n        console.log('Logout error:', error);\r\n        // Ensure we always clear local storage and state\r\n        // localStorage.removeItem('token');\r\n        // localStorage.removeItem('refreshToken');\r\n        // setToken(null);\r\n        // setUser(null);\r\n        // navigate('/login');\r\n    }\r\n};\r\n\r\n  const register = async (formData) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:8000/api/auth/register/\",\r\n        formData\r\n      );\r\n      console.log(\"Registration response:\", response);\r\n      return { success: true, data: response.data, };\r\n    } catch (error) {\r\n      console.log(\"Registration error:\", error);\r\n      console.error(\"Registration error:\", error);\r\n      return { success: false, error: error.response?.data };\r\n    }\r\n  };\r\n\r\n  const verifyEmail = async (email, code) => {\r\n      try {\r\n          const response = await axios.post(\r\n              \"http://127.0.0.1:8000/api/auth/verify-email/\",\r\n              { email, code }\r\n          );\r\n          console.log(\"Email verification response:\", response);\r\n          return true;\r\n      } catch (error) {\r\n          console.error(\"Email verification error:\", error);\r\n          console.log(\"Email verification error:\", error);\r\n          return false;\r\n      }\r\n  };\r\n\r\n  const requestPasswordReset = async (email) => {\r\n    try {\r\n      const response = await axios.post(\"http://127.0.0.1:8000/api/auth/request-reset-email/\", {\r\n        email,\r\n      });\r\n      console.log(\"Password reset request response:\", response);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Password reset request error:\", error);\r\n      console.log(\"Password reset request error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (uidb64, token, password, password2) => {\r\n    try {\r\n      const response = await axios.patch(\r\n        \"http://127.0.0.1:8000/api/auth/password-reset-complete/\",\r\n        {\r\n          uidb64,\r\n          token,\r\n          password,\r\n          password2,\r\n        }\r\n      );\r\n      console.log(\"Password reset response:\", response);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Password reset error:\", error);\r\n      console.log(\"Password reset error:\", error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        if (token) {\r\n          const decoded = jwtDecode(token);\r\n          setUser(decoded);\r\n\r\n          // Check if token is expired\r\n          const currentTime = Date.now() / 1000;\r\n          if (decoded.exp < currentTime) {\r\n            try {\r\n              const refreshToken = localStorage.getItem(\"refreshToken\");\r\n              const response = await axios.post(\r\n                \"http://127.0.0.1:8000/api/token/refresh/\",\r\n                {\r\n                  refresh: refreshToken,\r\n                }\r\n              );\r\n\r\n              const newAccessToken = response.data.access;\r\n              localStorage.setItem(\"token\", newAccessToken);\r\n              setToken(newAccessToken);\r\n\r\n              const newDecoded = jwtDecode(newAccessToken);\r\n              setUser(newDecoded);\r\n            } catch (refreshError) {\r\n              logout();\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        logout();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        isLoading,\r\n        login,\r\n        logout,\r\n        register,\r\n        verifyEmail,\r\n        requestPasswordReset,\r\n        resetPassword,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}